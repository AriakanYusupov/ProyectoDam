%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: alien_ship.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: User
%%CreationDate: 8/12/2016
%%BoundingBox: 0 0 800 800
%%HiResBoundingBox: 0 0 800 800
%%CropBox: 0 0 800 800
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.1 x35 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-08-12T10:30:37+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-08-12T10:30:37+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-08-12T10:30:37+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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&#xA;uxV2KuxV2KuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:2935fafc-7f14-7e44-9fc5-6e3e9fdca925</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:2935fafc-7f14-7e44-9fc5-6e3e9fdca925</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:d74c347c-ccb1-5c48-9eb2-21f620ecf87e</stRef:instanceID>
            <stRef:documentID>xmp.did:d74c347c-ccb1-5c48-9eb2-21f620ecf87e</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d74c347c-ccb1-5c48-9eb2-21f620ecf87e</stEvt:instanceID>
                  <stEvt:when>2016-08-12T10:30:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2935fafc-7f14-7e44-9fc5-6e3e9fdca925</stEvt:instanceID>
                  <stEvt:when>2016-08-12T10:30:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>800.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Yellow</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Cyan</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>174</xmpG:green>
                           <xmpG:blue>239</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Blue</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>65</xmpG:green>
                           <xmpG:blue>54</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>64</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>43</xmpG:red>
                           <xmpG:green>182</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -800 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800 li
800 800 li
800 0 li
cp
clp
800 800 mo
0 800 li
0 0 li
800 0 li
800 800 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
336.265 362.726 mo
119.322 362.726 li
119.322 341.734 li
336.265 341.734 li
336.265 362.726 li
.137255 .121569 .12549 rgb
f
341.229 363.976 mo
228.349 407.462 li
227.992 407.6 227.596 407.6 227.238 407.462 cv
114.359 363.976 li
112.761 363.36 113.202 360.989 114.914 360.989 cv
340.673 360.989 li
342.386 360.989 342.827 363.36 341.229 363.976 cv
.254902 .25098 .258824 rgb
f
399.738 357.372 mo
55.8502 357.372 li
53.0219 357.372 50.708 355.058 50.708 352.23 cv
50.708 349.402 53.0219 347.088 55.8502 347.088 cv
399.738 347.088 li
402.566 347.088 404.88 349.402 404.88 352.23 cv
404.88 355.058 402.566 357.372 399.738 357.372 cv
0 .454902 .580392 rgb
f
58.0772 357.237 mo
58.4367 359.592 65.355 361.471 73.84 361.471 cv
82.3251 361.471 89.2434 359.592 89.603 357.237 cv
58.0772 357.237 li
cp
1 .333333 0 rgb
f
365.985 357.237 mo
366.345 359.592 373.263 361.471 381.748 361.471 cv
390.233 361.471 397.151 359.592 397.511 357.237 cv
365.985 357.237 li
cp
f
72.4865 340.036 mo
218.427 299.392 li
224.555 297.685 231.033 297.685 237.16 299.392 cv
383.101 340.036 li
385.062 340.582 384.667 343.47 382.632 343.47 cv
72.956 343.47 li
70.9204 343.47 70.5259 340.582 72.4865 340.036 cv
.690196 0 .00392157 rgb
f
97.9909 340.036 mo
219.966 299.392 li
225.087 297.685 230.501 297.685 235.622 299.392 cv
357.597 340.036 li
359.236 340.582 358.906 343.47 357.204 343.47 cv
98.3832 343.47 li
96.6819 343.47 96.3521 340.582 97.9909 340.036 cv
.901961 0 0 rgb
f
133.368 340.036 mo
222.099 299.392 li
225.825 297.685 229.763 297.685 233.489 299.392 cv
322.22 340.036 li
323.412 340.582 323.172 343.47 321.934 343.47 cv
133.653 343.47 li
132.416 343.47 132.176 340.582 133.368 340.036 cv
1 .25098 .105882 rgb
f
168.745 340.036 mo
224.233 299.392 li
226.563 297.685 229.025 297.685 231.355 299.392 cv
286.843 340.036 li
287.588 340.582 287.438 343.47 286.664 343.47 cv
168.924 343.47 li
168.149 343.47 167.999 340.582 168.745 340.036 cv
1 .333333 0 rgb
f
307.788 363.976 mo
228.186 407.462 li
227.934 407.6 227.654 407.6 227.402 407.462 cv
147.8 363.976 li
146.674 363.36 146.984 360.989 148.192 360.989 cv
307.396 360.989 li
308.603 360.989 308.914 363.36 307.788 363.976 cv
.345098 .34902 .356863 rgb
f
227.923 407.844 mo
227.905 407.844 227.928 407.803 227.993 407.72 cv
228.068 407.541 li
228.163 407.524 228.258 407.498 228.349 407.462 cv
228.437 407.429 li
228.099 407.717 li
227.999 407.802 227.94 407.844 227.923 407.844 cv
1 1 1 rgb
f
228.068 407.541 mo
228.081 407.511 li
228.116 407.498 228.151 407.481 228.186 407.462 cv
228.773 407.141 li
228.437 407.429 li
228.349 407.462 li
228.258 407.498 228.163 407.524 228.068 407.541 cv
.411765 .407843 .415686 rgb
f
278.75 360.989 mo
248.246 360.989 li
248.492 360.875 248.763 360.812 249.045 360.812 cv
277.935 360.812 li
278.237 360.812 278.51 360.877 278.75 360.989 cv
.321569 .305882 .309804 rgb
f
228.081 407.511 mo
247.301 361.969 li
247.488 361.528 247.829 361.184 248.246 360.989 cv
278.75 360.989 li
279.908 361.533 280.273 363.199 279.164 364.145 cv
228.773 407.141 li
228.186 407.462 li
228.151 407.481 228.116 407.498 228.081 407.511 cv
.482353 .486274 .494118 rgb
f
274.346 343.462 mo
247.784 343.462 li
247.3 343.462 246.862 343.173 246.671 342.728 cv
228.637 300.634 li
228.229 299.681 228.195 299.205 228.526 299.205 cv
228.869 299.205 229.601 299.714 230.714 300.73 cv
275.163 341.359 li
275.978 342.104 275.451 343.462 274.346 343.462 cv
1 .466667 .2 rgb
f
313.103 347.088 mo
141.395 347.088 li
141.395 357.372 li
313.103 357.372 li
313.103 347.088 li
0 .682353 .937255 rgb
f
283.481 357.372 mo
273.439 357.372 li
273.439 347.088 li
245.825 347.088 li
245.825 357.372 li
171.017 357.372 li
171.017 347.088 li
283.481 347.088 li
283.481 357.372 li
0 .792157 .968627 rgb
f
273.439 357.372 mo
245.825 357.372 li
245.825 347.088 li
273.439 347.088 li
273.439 357.372 li
0 .835294 .976471 rgb
f
589.45 620.332 mo
587.823 620.332 586.311 620.816 585.043 621.643 cv
585.043 691.076 li
593.532 691.076 li
593.532 621.447 li
592.333 620.742 590.941 620.332 589.45 620.332 cv
.345098 .34902 .356863 rgb
f
589.288 620.333 mo
589.303 620.332 589.318 620.332 589.332 620.332 cv
589.341 620.332 589.349 620.332 589.358 620.332 cv
589.334 620.332 589.311 620.333 589.288 620.333 cv
1 1 1 rgb
f
590.455 691.076 mo
588.12 691.076 li
588.12 621.643 li
588.457 620.844 588.857 620.364 589.288 620.333 cv
589.311 620.333 589.334 620.332 589.358 620.332 cv
589.758 620.349 590.132 620.757 590.455 621.447 cv
590.455 691.076 li
.658823 .658823 .662745 rgb
f
567.339 697.545 mo
567.744 691.257 577.531 686.225 589.554 686.225 cv
601.576 686.225 611.364 691.257 611.768 697.545 cv
567.339 697.545 li
cp
.313726 .337255 1 rgb
f
589.554 690.533 mo
598.653 690.533 606.468 693.417 609.908 697.545 cv
569.2 697.545 li
572.639 693.417 580.454 690.533 589.554 690.533 cv
cp
.180392 .192157 .572549 rgb
f
637.648 621.363 mo
636.764 622.081 635.828 622.982 634.916 624.024 cv
633.656 625.465 632.664 626.919 632.039 628.16 cv
676.656 692.128 li
683.619 687.271 li
637.648 621.363 li
.345098 .34902 .356863 rgb
f
680.623 690.405 mo
680.133 689.702 li
682.129 688.31 li
682.62 689.013 li
680.623 690.405 li
1 1 1 rgb
f
680.133 689.702 mo
634.59 624.408 li
634.698 624.28 634.804 624.152 634.916 624.024 cv
635.369 623.507 635.828 623.027 636.284 622.583 cv
682.129 688.31 li
680.133 689.702 li
.658823 .658823 .662745 rgb
f
701.537 697.545 mo
701.132 691.257 691.345 686.225 679.322 686.225 cv
667.3 686.225 657.513 691.257 657.108 697.545 cv
701.537 697.545 li
cp
.313726 .337255 1 rgb
f
679.322 690.533 mo
670.223 690.533 662.408 693.417 658.968 697.545 cv
699.677 697.545 li
696.237 693.417 688.422 690.533 679.322 690.533 cv
cp
.180392 .192157 .572549 rgb
f
540.376 621.363 mo
541.259 622.081 542.196 622.982 543.107 624.024 cv
544.368 625.465 545.36 626.919 545.985 628.16 cv
501.367 692.128 li
494.405 687.271 li
540.376 621.363 li
.345098 .34902 .356863 rgb
f
497.4 690.405 mo
495.404 689.013 li
495.894 688.31 li
497.89 689.702 li
497.4 690.405 li
1 1 1 rgb
f
497.89 689.702 mo
495.894 688.31 li
541.74 622.583 li
542.196 623.027 542.655 623.507 543.107 624.024 cv
543.219 624.152 543.326 624.28 543.434 624.408 cv
497.89 689.702 li
.658823 .658823 .662745 rgb
f
476.487 697.545 mo
476.892 691.257 486.679 686.225 498.701 686.225 cv
510.724 686.225 520.511 691.257 520.916 697.545 cv
476.487 697.545 li
cp
.313726 .337255 1 rgb
f
498.701 690.533 mo
507.801 690.533 515.616 693.417 519.056 697.545 cv
478.347 697.545 li
481.787 693.417 489.602 690.533 498.701 690.533 cv
cp
.180392 .192157 .572549 rgb
f
727.513 598.956 mo
451.307 598.956 li
451.307 566.155 li
727.513 566.155 li
727.513 598.956 li
0 .454902 .580392 rgb
f
727.513 590.956 mo
451.307 590.956 li
451.307 574.155 li
727.513 574.155 li
727.513 590.956 li
cp
.00784314 .666667 .698039 rgb
f
506.765 607.066 mo
672.054 607.066 li
672.054 626.639 li
506.765 626.639 li
506.765 607.066 li
cp
.180392 .192157 .572549 rgb
f
667.854 532.742 mo
661.866 496.385 629.027 468.584 589.41 468.584 cv
549.793 468.584 516.954 496.385 510.966 532.742 cv
667.854 532.742 li
.0235294 .670588 .847059 rgb
f
658.309 528.618 mo
644.051 528.618 li
641.286 513.156 627.657 501.414 611.258 501.414 cv
594.858 501.414 581.229 513.156 578.464 528.618 cv
529.742 528.618 li
531.6 520.2 535.214 512.401 540.196 505.592 cv
541.197 506.102 542.451 506.35 543.883 506.35 cv
547.841 506.35 553.154 504.451 558.209 500.918 cv
566.176 495.348 570.551 487.781 568.188 483.794 cv
576.118 480.54 584.853 478.738 594.026 478.738 cv
625.63 478.738 652.02 500.123 658.309 528.618 cv
.490196 .827451 .921569 rgb
f
644.051 528.618 mo
578.464 528.618 li
581.229 513.156 594.858 501.414 611.258 501.414 cv
627.657 501.414 641.286 513.156 644.051 528.618 cv
.733333 .909804 .960784 rgb
f
483.082 577.405 mo
458.725 577.405 li
456.869 577.405 455.35 578.923 455.35 580.78 cv
455.35 583.994 li
455.35 585.85 456.869 587.369 458.725 587.369 cv
483.082 587.369 li
484.938 587.369 486.457 585.85 486.457 583.994 cv
486.457 580.78 li
486.457 578.923 484.938 577.405 483.082 577.405 cv
cp
.282353 .572549 .611765 rgb
f
720.208 577.405 mo
684.955 577.405 li
683.098 577.405 681.58 578.923 681.58 580.78 cv
681.58 583.994 li
681.58 585.85 683.098 587.369 684.955 587.369 cv
720.208 587.369 li
722.064 587.369 723.583 585.85 723.583 583.994 cv
723.583 580.78 li
723.583 578.923 722.064 577.405 720.208 577.405 cv
cp
f
515.269 577.405 mo
464.835 577.405 li
462.979 577.405 461.46 578.923 461.46 580.78 cv
461.46 583.994 li
461.46 585.85 462.979 587.369 464.835 587.369 cv
515.269 587.369 li
517.125 587.369 518.644 585.85 518.644 583.994 cv
518.644 580.78 li
518.644 578.923 517.125 577.405 515.269 577.405 cv
cp
.313726 .337255 1 rgb
f
561.461 577.405 mo
537.289 577.405 li
535.433 577.405 533.914 578.923 533.914 580.78 cv
533.914 583.994 li
533.914 585.85 535.433 587.369 537.289 587.369 cv
561.461 587.369 li
563.317 587.369 564.836 585.85 564.836 583.994 cv
564.836 580.78 li
564.836 578.923 563.317 577.405 561.461 577.405 cv
cp
f
644.016 577.405 mo
578.738 577.405 li
576.881 577.405 575.363 578.923 575.363 580.78 cv
575.363 583.994 li
575.363 585.85 576.881 587.369 578.738 587.369 cv
644.016 587.369 li
645.872 587.369 647.391 585.85 647.391 583.994 cv
647.391 580.78 li
647.391 578.923 645.872 577.405 644.016 577.405 cv
cp
f
487.896 577.405 mo
473.908 577.405 li
472.052 577.405 470.533 578.923 470.533 580.78 cv
470.533 583.994 li
470.533 585.85 472.052 587.369 473.908 587.369 cv
487.896 587.369 li
489.753 587.369 491.271 585.85 491.271 583.994 cv
491.271 580.78 li
491.271 578.923 489.753 577.405 487.896 577.405 cv
cp
.517647 .780392 .623529 rgb
f
702.87 577.405 mo
661.292 577.405 li
659.436 577.405 657.917 578.923 657.917 580.78 cv
657.917 583.994 li
657.917 585.85 659.436 587.369 661.292 587.369 cv
702.87 587.369 li
704.726 587.369 706.245 585.85 706.245 583.994 cv
706.245 580.78 li
706.245 578.923 704.726 577.405 702.87 577.405 cv
cp
f
638.276 577.405 mo
588.366 577.405 li
586.51 577.405 584.991 578.923 584.991 580.78 cv
584.991 583.994 li
584.991 585.85 586.51 587.369 588.366 587.369 cv
638.276 587.369 li
640.132 587.369 641.651 585.85 641.651 583.994 cv
641.651 580.78 li
641.651 578.923 640.132 577.405 638.276 577.405 cv
cp
f
500.713 577.405 mo
486.725 577.405 li
484.869 577.405 483.35 578.923 483.35 580.78 cv
483.35 583.994 li
483.35 585.85 484.869 587.369 486.725 587.369 cv
500.713 587.369 li
502.569 587.369 504.088 585.85 504.088 583.994 cv
504.088 580.78 li
504.088 578.923 502.569 577.405 500.713 577.405 cv
cp
.937255 .254902 .211765 rgb
f
703.068 577.405 mo
688.709 577.405 li
686.853 577.405 685.334 578.923 685.334 580.78 cv
685.334 583.994 li
685.334 585.85 686.853 587.369 688.709 587.369 cv
703.068 587.369 li
704.924 587.369 706.443 585.85 706.443 583.994 cv
706.443 580.78 li
706.443 578.923 704.924 577.405 703.068 577.405 cv
cp
f
546.904 577.405 mo
532.546 577.405 li
530.689 577.405 529.171 578.923 529.171 580.78 cv
529.171 583.994 li
529.171 585.85 530.689 587.369 532.546 587.369 cv
546.904 587.369 li
548.76 587.369 550.279 585.85 550.279 583.994 cv
550.279 580.78 li
550.279 578.923 548.76 577.405 546.904 577.405 cv
cp
f
632.721 577.405 mo
618.362 577.405 li
616.506 577.405 614.987 578.923 614.987 580.78 cv
614.987 583.994 li
614.987 585.85 616.506 587.369 618.362 587.369 cv
632.721 587.369 li
634.577 587.369 636.096 585.85 636.096 583.994 cv
636.096 580.78 li
636.096 578.923 634.577 577.405 632.721 577.405 cv
cp
f
540.196 505.592 mo
539.503 505.24 538.933 504.762 538.508 504.155 cv
535.776 500.247 540.167 492.461 548.316 486.765 cv
553.37 483.232 558.684 481.333 562.641 481.333 cv
565.064 481.333 566.979 482.044 568.016 483.528 cv
568.077 483.615 568.134 483.703 568.188 483.794 cv
556.866 488.439 547.185 496.042 540.196 505.592 cv
.415686 .803922 .909804 rgb
f
543.883 506.35 mo
542.451 506.35 541.197 506.102 540.196 505.592 cv
547.185 496.042 556.866 488.439 568.188 483.794 cv
570.551 487.781 566.176 495.348 558.209 500.918 cv
553.154 504.451 547.841 506.35 543.883 506.35 cv
.694118 .898039 .952941 rgb
f
672.054 559.416 mo
506.765 559.416 li
506.765 539.842 li
672.054 539.842 li
672.054 559.416 li
.180392 .192157 .572549 rgb
f
511.793 528.851 mo
505.298 532.138 499.23 535.825 493.662 539.863 cv
491.983 541.081 492.841 543.737 494.916 543.737 cv
683.904 543.737 li
685.978 543.737 686.837 541.081 685.158 539.863 cv
679.59 535.825 673.521 532.138 667.026 528.851 cv
666.723 528.698 666.386 528.618 666.046 528.618 cv
512.774 528.618 li
512.434 528.618 512.097 528.698 511.793 528.851 cv
.768627 .537255 .196078 rgb
f
530.003 528.851 mo
524.645 532.138 519.64 535.825 515.047 539.863 cv
513.661 541.081 514.37 543.738 516.081 543.738 cv
671.97 543.738 li
673.682 543.738 674.39 541.081 673.004 539.863 cv
668.412 535.825 663.406 532.138 658.049 528.851 cv
657.799 528.698 657.52 528.618 657.24 528.618 cv
530.811 528.618 li
530.531 528.618 530.253 528.698 530.003 528.851 cv
.984314 .690196 .25098 rgb
f
651.905 543.738 mo
571.841 543.738 li
570.962 543.738 570.599 541.081 571.31 539.863 cv
573.669 535.825 576.24 532.138 578.991 528.852 cv
579.12 528.698 579.263 528.618 579.406 528.618 cv
644.34 528.618 li
644.484 528.618 644.627 528.698 644.755 528.852 cv
647.507 532.138 650.078 535.825 652.437 539.863 cv
653.148 541.081 652.784 543.738 651.905 543.738 cv
.992157 .792157 .14902 rgb
f
470.072 547.27 mo
459.38 552.671 449.437 558.776 440.382 565.494 cv
438.337 567.011 439.4 570.258 441.947 570.258 cv
736.873 570.258 li
739.42 570.258 740.483 567.011 738.438 565.494 cv
729.383 558.776 719.44 552.671 708.748 547.27 cv
708.375 547.082 707.96 546.984 707.543 546.984 cv
471.277 546.984 li
470.859 546.984 470.445 547.082 470.072 547.27 cv
.768627 .537255 .196078 rgb
f
488.665 547.27 mo
479.639 552.672 471.245 558.776 463.601 565.494 cv
461.874 567.011 462.771 570.258 464.922 570.258 cv
713.898 570.258 li
716.048 570.258 716.946 567.011 715.219 565.494 cv
707.575 558.776 699.181 552.672 690.155 547.27 cv
689.84 547.082 689.49 546.984 689.138 546.984 cv
489.682 546.984 li
489.33 546.984 488.98 547.082 488.665 547.27 cv
.984314 .690196 .25098 rgb
f
670.209 570.258 mo
559.415 570.258 li
559.411 570.258 559.407 570.258 559.403 570.258 cv
670.222 570.258 li
670.218 570.258 670.214 570.258 670.209 570.258 cv
.4 .65098 .34902 rgb
f
670.222 570.258 mo
559.403 570.258 li
558.455 570.23 558.063 567.005 558.828 565.494 cv
562.229 558.777 565.964 552.672 569.981 547.271 cv
570.121 547.082 570.277 546.984 570.434 546.984 cv
656.421 546.984 li
656.578 546.984 667.395 558.777 670.797 565.494 cv
671.562 567.005 671.17 570.23 670.222 570.258 cv
.992157 .792157 .14902 rgb
f
708.715 619.228 mo
719.566 613.749 729.646 607.545 738.81 600.711 cv
740.734 599.276 739.738 596.223 737.338 596.223 cv
441.482 596.223 li
439.082 596.223 438.086 599.276 440.01 600.711 cv
449.174 607.545 459.253 613.749 470.105 619.228 cv
470.456 619.405 470.847 619.498 471.24 619.498 cv
707.579 619.498 li
707.973 619.498 708.363 619.405 708.715 619.228 cv
cp
.768627 .537255 .196078 rgb
f
667.046 637.62 mo
673.445 634.381 679.429 630.754 684.928 626.784 cv
686.682 625.518 685.784 622.744 683.621 622.744 cv
495.199 622.744 li
493.036 622.744 492.138 625.518 493.892 626.784 cv
499.391 630.754 505.375 634.381 511.774 637.62 cv
512.09 637.78 512.441 637.864 512.796 637.864 cv
666.024 637.864 li
666.378 637.864 666.73 637.78 667.046 637.62 cv
cp
f
685.772 619.228 mo
694.537 613.749 702.678 607.545 710.079 600.711 cv
711.633 599.276 710.829 596.223 708.891 596.223 cv
469.929 596.223 li
467.991 596.223 467.187 599.276 468.74 600.711 cv
476.142 607.545 484.283 613.749 493.048 619.228 cv
493.332 619.405 493.647 619.498 493.965 619.498 cv
684.855 619.498 li
685.173 619.498 685.488 619.405 685.772 619.228 cv
cp
.768627 .588235 .313726 rgb
f
652.116 637.62 mo
657.284 634.381 662.118 630.754 666.56 626.784 cv
667.976 625.518 667.25 622.744 665.503 622.744 cv
513.316 622.744 li
511.569 622.744 510.844 625.518 512.26 626.784 cv
516.702 630.754 521.536 634.381 526.704 637.62 cv
526.959 637.78 527.243 637.864 527.529 637.864 cv
651.291 637.864 li
651.577 637.864 651.861 637.78 652.116 637.62 cv
cp
f
661.139 619.228 mo
665.186 613.749 668.946 607.545 672.363 600.711 cv
673.081 599.276 672.709 596.223 671.814 596.223 cv
561.471 596.223 li
560.576 596.223 560.205 599.276 560.922 600.711 cv
564.34 607.545 568.099 613.749 572.147 619.228 cv
572.278 619.405 572.423 619.498 572.57 619.498 cv
660.715 619.498 li
660.862 619.498 661.008 619.405 661.139 619.228 cv
cp
.768627 .65098 .470588 rgb
f
645.598 637.62 mo
647.984 634.381 650.216 630.754 652.267 626.784 cv
652.922 625.518 652.586 622.744 651.78 622.744 cv
581.506 622.744 li
580.699 622.744 580.364 625.518 581.018 626.784 cv
583.069 630.754 585.301 634.381 587.687 637.62 cv
587.805 637.78 587.936 637.864 588.069 637.864 cv
645.217 637.864 li
645.349 637.864 645.48 637.78 645.598 637.62 cv
cp
f
519.819 328.939 mo
659 328.939 li
660.712 328.939 662.1 330.327 662.1 332.039 cv
662.1 333.125 li
662.1 334.837 660.712 336.225 659 336.225 cv
519.819 336.225 li
518.107 336.225 516.72 334.837 516.72 333.125 cv
516.72 332.039 li
516.72 330.327 518.107 328.939 519.819 328.939 cv
cp
.611765 .239216 .231373 rgb
f
516.66 335.171 mo
496.612 341.26 480.829 349.797 471.641 359.779 cv
707.178 359.779 li
697.99 349.797 682.208 341.26 662.16 335.171 cv
516.66 335.171 li
cp
.254902 .25098 .258824 rgb
f
432.904 352.841 mo
431.984 352.841 431.622 354.037 432.389 354.545 cv
467.041 377.483 524.602 392.492 589.761 392.492 cv
654.92 392.492 712.48 377.483 747.132 354.545 cv
747.899 354.037 747.537 352.841 746.617 352.841 cv
432.904 352.841 li
.286275 .368627 .262745 rgb
f
462.673 352.841 mo
461.927 352.841 461.634 354.037 462.255 354.545 cv
490.331 377.483 536.968 392.492 589.761 392.492 cv
642.554 392.492 689.19 377.483 717.266 354.545 cv
717.887 354.037 717.594 352.841 716.848 352.841 cv
462.673 352.841 li
.352941 .458824 .329412 rgb
f
504.349 352.841 mo
503.848 352.841 503.651 354.037 504.068 354.545 cv
522.937 377.483 554.28 392.492 589.761 392.492 cv
625.241 392.492 656.584 377.483 675.453 354.545 cv
675.871 354.037 675.673 352.841 675.172 352.841 cv
504.349 352.841 li
.419608 .545098 .392157 rgb
f
433.551 346.581 mo
745.269 346.581 li
747.491 346.581 749.292 348.382 749.292 350.604 cv
749.292 350.604 li
749.292 352.826 747.491 354.627 745.269 354.627 cv
433.551 354.627 li
431.329 354.627 429.528 352.826 429.528 350.604 cv
429.528 350.604 li
429.528 348.382 431.329 346.581 433.551 346.581 cv
cp
.611765 .239216 .231373 rgb
f
505.893 346.581 mo
677.111 346.581 li
679.333 346.581 681.134 348.382 681.134 350.604 cv
681.134 350.604 li
681.134 352.826 679.333 354.627 677.111 354.627 cv
505.893 354.627 li
503.671 354.627 501.87 352.826 501.87 350.604 cv
501.87 350.604 li
501.87 348.382 503.671 346.581 505.893 346.581 cv
cp
.741176 .290196 .282353 rgb
f
537.925 346.581 mo
638.772 346.581 li
640.993 346.581 642.795 348.382 642.795 350.604 cv
642.795 350.604 li
642.795 352.826 640.993 354.627 638.772 354.627 cv
537.925 354.627 li
535.703 354.627 533.902 352.826 533.902 350.604 cv
533.902 350.604 li
533.902 348.382 535.703 346.581 537.925 346.581 cv
cp
.839216 .329412 .321569 rgb
f
649.591 387.786 mo
529.929 387.786 li
532.981 392.321 537.471 396.423 543.055 399.905 cv
636.466 399.905 li
642.05 396.423 646.54 392.321 649.591 387.786 cv
.345098 .34902 .356863 rgb
f
627.014 399.905 mo
615.963 399.905 li
619.096 396.423 621.615 392.321 623.327 387.786 cv
556.193 387.786 li
557.905 392.321 560.424 396.423 563.557 399.905 cv
552.507 399.905 li
548.052 396.423 544.471 392.321 542.037 387.786 cv
637.483 387.786 li
635.049 392.321 631.468 396.423 627.014 399.905 cv
.415686 .419608 .427451 rgb
f
615.963 399.905 mo
563.557 399.905 li
560.424 396.423 557.905 392.321 556.193 387.786 cv
623.327 387.786 li
621.615 392.321 619.096 396.423 615.963 399.905 cv
.47451 .482353 .490196 rgb
f
652.621 321.899 mo
647.729 292.193 620.897 269.477 588.526 269.477 cv
556.156 269.477 529.325 292.193 524.432 321.899 cv
652.621 321.899 li
.0235294 .670588 .847059 rgb
f
645.326 321.145 mo
539.27 321.145 li
540.346 314.611 542.705 308.486 546.092 303.014 cv
546.468 303.06 546.863 303.083 547.274 303.083 cv
550.776 303.083 555.477 301.403 559.948 298.277 cv
567.083 293.29 570.961 286.491 568.697 283 cv
575.82 279.653 583.829 277.774 592.298 277.774 cv
619.079 277.774 641.278 296.568 645.326 321.145 cv
582.381 310.539 mo
580.971 313.143 579.981 316.002 579.498 319.029 cv
633.257 319.029 li
631.205 306.15 619.953 296.302 606.378 296.302 cv
601.503 296.302 596.929 297.572 592.972 299.796 cv
592.903 299.544 592.796 299.311 592.648 299.099 cv
592.115 298.336 591.13 297.97 589.885 297.97 cv
587.849 297.97 585.117 298.947 582.518 300.764 cv
578.328 303.693 576.07 307.697 577.475 309.706 cv
578.008 310.469 578.993 310.835 580.238 310.835 cv
580.89 310.835 581.614 310.735 582.381 310.539 cv
.490196 .827451 .921569 rgb
f
633.257 319.029 mo
579.498 319.029 li
579.981 316.002 580.971 313.143 582.381 310.539 cv
584.01 310.123 585.838 309.276 587.605 308.041 cv
591.355 305.42 593.557 301.939 592.972 299.796 cv
596.929 297.572 601.503 296.302 606.378 296.302 cv
619.953 296.302 631.205 306.15 633.257 319.029 cv
.733333 .909804 .960784 rgb
f
525.108 318.72 mo
519.801 321.406 514.843 324.418 510.294 327.718 cv
508.921 328.713 509.623 330.883 511.318 330.883 cv
665.735 330.883 li
667.43 330.883 668.132 328.713 666.76 327.718 cv
662.21 324.418 657.252 321.406 651.945 318.72 cv
651.697 318.595 651.422 318.53 651.144 318.53 cv
525.909 318.53 li
525.631 318.53 525.356 318.595 525.108 318.72 cv
cp
.286275 .368627 .262745 rgb
f
525.108 318.72 mo
519.801 321.406 514.843 324.418 510.294 327.718 cv
508.921 328.713 509.623 330.883 511.318 330.883 cv
665.735 330.883 li
667.43 330.883 668.132 328.713 666.76 327.718 cv
662.21 324.418 657.252 321.406 651.945 318.72 cv
651.697 318.595 651.422 318.53 651.144 318.53 cv
525.909 318.53 li
525.631 318.53 525.356 318.595 525.108 318.72 cv
cp
f
535.635 318.721 mo
531.209 321.406 527.074 324.418 523.28 327.718 cv
522.136 328.713 522.721 330.884 524.134 330.884 cv
652.919 330.884 li
654.332 330.884 654.917 328.713 653.773 327.718 cv
649.979 324.418 645.844 321.406 641.418 318.721 cv
641.211 318.595 640.981 318.53 640.75 318.53 cv
536.303 318.53 li
536.072 318.53 535.842 318.595 535.635 318.721 cv
cp
.352941 .458824 .329412 rgb
f
555.425 318.721 mo
552.656 321.406 550.068 324.418 547.693 327.718 cv
546.977 328.713 547.343 330.884 548.228 330.884 cv
628.826 330.884 li
629.71 330.884 630.076 328.713 629.36 327.718 cv
626.986 324.418 624.398 321.406 621.628 318.721 cv
621.499 318.595 621.355 318.53 621.21 318.53 cv
555.844 318.53 li
555.699 318.53 555.555 318.595 555.425 318.721 cv
cp
.419608 .545098 .392157 rgb
f
546.092 303.014 mo
544.51 302.817 543.261 302.202 542.519 301.141 cv
540.103 297.684 543.987 290.796 551.196 285.757 cv
555.668 282.631 560.368 280.951 563.87 280.951 cv
566.013 280.951 567.707 281.58 568.625 282.893 cv
568.649 282.928 568.673 282.964 568.697 283 cv
559.283 287.424 551.417 294.412 546.092 303.014 cv
.415686 .803922 .909804 rgb
f
547.274 303.083 mo
546.863 303.083 546.468 303.06 546.092 303.014 cv
551.417 294.412 559.283 287.424 568.697 283 cv
570.961 286.491 567.083 293.29 559.948 298.277 cv
555.477 301.403 550.776 303.083 547.274 303.083 cv
.694118 .898039 .952941 rgb
f
580.238 310.835 mo
578.993 310.835 578.008 310.469 577.475 309.706 cv
576.07 307.697 578.328 303.693 582.518 300.764 cv
585.117 298.947 587.849 297.97 589.885 297.97 cv
591.13 297.97 592.115 298.336 592.648 299.099 cv
592.796 299.311 592.903 299.544 592.972 299.796 cv
588.499 302.309 584.815 306.043 582.381 310.539 cv
581.614 310.735 580.89 310.835 580.238 310.835 cv
f
582.381 310.539 mo
584.815 306.043 588.499 302.309 592.972 299.796 cv
593.557 301.939 591.355 305.42 587.605 308.041 cv
585.838 309.276 584.01 310.123 582.381 310.539 cv
.839216 .945098 .976471 rgb
f
659.568 186.699 mo
519.251 186.699 li
517.853 186.699 516.72 185.566 516.72 184.168 cv
516.72 182.77 517.853 181.636 519.251 181.636 cv
659.568 181.636 li
660.967 181.636 662.1 182.77 662.1 184.168 cv
662.1 185.566 660.967 186.699 659.568 186.699 cv
.180392 .192157 .572549 rgb
f
662.16 182.369 mo
682.208 178.137 697.99 172.204 707.178 165.268 cv
471.641 165.268 li
480.829 172.204 496.612 178.137 516.66 182.369 cv
662.16 182.369 li
.490196 .52549 .513726 rgb
f
693.187 165.268 mo
655.659 165.268 li
656.997 164.036 658.106 162.743 658.958 161.401 cv
674.471 161.401 li
674.471 161.401 li
696.803 161.401 li
696.043 162.728 694.824 164.021 693.187 165.268 cv
562.981 165.268 mo
508.302 165.268 li
506.665 164.021 505.446 162.728 504.686 161.401 cv
559.682 161.401 li
560.533 162.743 561.642 164.036 562.981 165.268 cv
1 1 1 rgb
f
600.744 181.627 mo
557.435 181.627 520.756 174.754 508.302 165.268 cv
562.981 165.268 li
571.413 173.025 588.996 178.36 609.32 178.36 cv
629.644 178.36 647.226 173.025 655.659 165.268 cv
693.187 165.268 li
680.732 174.754 644.054 181.627 600.744 181.627 cv
.490196 .568627 .568627 rgb
f
655.659 165.268 mo
562.981 165.268 li
561.642 164.036 560.533 162.743 559.682 161.401 cv
658.958 161.401 li
658.106 162.743 656.997 164.036 655.659 165.268 cv
1 1 1 rgb
f
609.32 178.36 mo
588.996 178.36 571.413 173.025 562.981 165.268 cv
655.659 165.268 li
647.226 173.025 629.644 178.36 609.32 178.36 cv
.490196 .607843 .619608 rgb
f
745.916 161.401 mo
746.836 161.401 747.198 160.205 746.431 159.697 cv
711.779 136.759 654.218 121.75 589.059 121.75 cv
523.9 121.75 466.34 136.759 431.688 159.697 cv
430.92 160.205 431.282 161.401 432.203 161.401 cv
745.916 161.401 li
.839216 .647059 .152941 rgb
f
716.147 161.401 mo
716.893 161.401 717.186 160.205 716.564 159.697 cv
688.489 136.759 641.852 121.75 589.059 121.75 cv
536.266 121.75 489.63 136.759 461.554 159.697 cv
460.932 160.205 461.226 161.401 461.971 161.401 cv
716.147 161.401 li
.980392 .756863 .176471 rgb
f
674.471 161.401 mo
674.972 161.401 675.169 160.205 674.751 159.697 cv
655.883 136.759 624.54 121.75 589.059 121.75 cv
553.579 121.75 522.236 136.759 503.367 159.697 cv
502.949 160.205 503.146 161.401 503.648 161.401 cv
674.471 161.401 li
.980392 .831373 .45098 rgb
f
745.269 167.661 mo
433.551 167.661 li
431.329 167.661 429.528 165.86 429.528 163.638 cv
429.528 161.416 431.329 159.614 433.551 159.614 cv
745.269 159.614 li
747.491 159.614 749.292 161.416 749.292 163.638 cv
749.292 165.86 747.491 167.661 745.269 167.661 cv
cp
.180392 .192157 .572549 rgb
f
718.341 167.661 mo
547.123 167.661 li
544.901 167.661 543.099 165.86 543.099 163.638 cv
543.099 161.416 544.901 159.614 547.123 159.614 cv
718.341 159.614 li
720.563 159.614 722.364 161.416 722.364 163.638 cv
722.364 165.86 720.563 167.661 718.341 167.661 cv
cp
.219608 .235294 .701961 rgb
f
690.437 167.661 mo
589.591 167.661 li
587.369 167.661 585.567 165.86 585.567 163.638 cv
585.567 161.416 587.369 159.614 589.591 159.614 cv
690.437 159.614 li
692.659 159.614 694.46 161.416 694.46 163.638 cv
694.46 165.86 692.659 167.661 690.437 167.661 cv
cp
.254902 .270588 .811765 rgb
f
529.228 126.456 mo
648.89 126.456 li
639.428 112.395 616.207 102.455 589.059 102.455 cv
561.911 102.455 538.69 112.395 529.228 126.456 cv
.505882 .529412 .521569 rgb
f
630.478 114.336 mo
624.934 114.336 li
617.943 109.993 608.74 107.356 598.655 107.356 cv
593.339 107.356 588.268 108.089 583.636 109.418 cv
582.713 108.324 580.959 107.774 578.759 107.774 cv
576.316 107.774 573.323 108.454 570.313 109.823 cv
567.579 111.067 565.285 112.672 563.684 114.336 cv
556.624 114.336 li
565.198 107.85 578.551 103.68 593.551 103.68 cv
608.551 103.68 621.904 107.85 630.478 114.336 cv
.505882 .572549 .576471 rgb
f
624.934 114.336 mo
583.317 114.336 li
584.302 112.801 584.619 111.31 584.069 110.102 cv
583.956 109.854 583.811 109.626 583.636 109.418 cv
588.268 108.089 593.339 107.356 598.655 107.356 cv
608.74 107.356 617.943 109.993 624.934 114.336 cv
.505882 .611765 .627451 rgb
f
529.228 126.456 mo
648.89 126.456 li
645.839 121.921 641.349 117.818 635.764 114.336 cv
542.354 114.336 li
536.77 117.818 532.28 121.921 529.228 126.456 cv
0 .682353 .937255 rgb
f
641.482 126.456 mo
632.227 126.456 li
630.514 121.921 627.996 117.818 624.863 114.336 cv
583.317 114.336 li
583.317 114.336 li
631.013 114.336 li
635.467 117.818 639.048 121.921 641.482 126.456 cv
565.092 126.456 mo
546.036 126.456 li
548.47 121.921 552.052 117.818 556.506 114.336 cv
563.684 114.336 li
561.632 116.469 560.72 118.696 561.484 120.377 cv
562.183 121.914 564.148 122.694 566.74 122.704 cv
566.129 123.917 565.578 125.169 565.092 126.456 cv
.333333 .839216 .972549 rgb
f
632.227 126.456 mo
622.732 126.456 li
565.092 126.456 li
565.578 125.169 566.129 123.917 566.74 122.704 cv
566.758 122.704 566.776 122.704 566.794 122.704 cv
569.237 122.704 572.231 122.025 575.241 120.655 cv
578.958 118.964 581.864 116.602 583.317 114.336 cv
624.863 114.336 li
627.996 117.818 630.514 121.921 632.227 126.456 cv
.619608 .92549 .988235 rgb
f
572.376 114.336 mo
563.684 114.336 li
565.285 112.672 567.579 111.067 570.313 109.823 cv
573.323 108.454 576.316 107.774 578.759 107.774 cv
580.959 107.774 582.713 108.324 583.636 109.418 cv
579.482 110.61 575.681 112.283 572.376 114.336 cv
.701961 .745098 .745098 rgb
f
583.317 114.336 mo
572.376 114.336 li
575.681 112.283 579.482 110.61 583.636 109.418 cv
583.811 109.626 583.956 109.854 584.069 110.102 cv
584.619 111.31 584.302 112.801 583.317 114.336 cv
.701961 .768627 .776471 rgb
f
566.74 122.704 mo
564.148 122.694 562.183 121.914 561.484 120.377 cv
560.72 118.696 561.632 116.469 563.684 114.336 cv
583.317 114.336 li
583.317 114.336 li
572.456 114.336 li
570.212 116.83 568.284 119.643 566.74 122.704 cv
.6 .901961 .984314 rgb
f
566.794 122.704 mo
566.776 122.704 566.758 122.704 566.74 122.704 cv
568.284 119.643 570.212 116.83 572.456 114.336 cv
583.317 114.336 li
581.864 116.602 578.958 118.964 575.241 120.655 cv
572.231 122.025 569.237 122.704 566.794 122.704 cv
.772549 .956863 .992157 rgb
f
126.557 182.137 mo
126.52 182.287 126.497 182.439 126.497 182.593 cv
126.497 184.861 130.583 186.699 135.622 186.699 cv
140.662 186.699 144.748 184.861 144.748 182.593 cv
144.748 182.439 144.725 182.287 144.688 182.137 cv
126.557 182.137 li
.929412 .47451 .541176 rgb
f
311.342 182.137 mo
311.305 182.287 311.282 182.439 311.282 182.593 cv
311.282 184.861 315.368 186.699 320.408 186.699 cv
325.447 186.699 329.533 184.861 329.533 182.593 cv
329.533 182.439 329.51 182.287 329.473 182.137 cv
311.342 182.137 li
f
373.809 154.443 mo
374.037 154.443 374.141 154.153 373.963 154.01 cv
338.239 125.309 286.094 107.22 228.015 107.22 cv
169.936 107.22 117.791 125.309 82.0669 154.01 cv
81.8889 154.153 81.9928 154.443 82.2213 154.443 cv
373.809 154.443 li
.6 .615686 .615686 rgb
f
337.371 154.443 mo
337.543 154.443 337.621 154.153 337.487 154.01 cv
310.691 125.309 271.579 107.22 228.015 107.22 cv
184.451 107.22 145.339 125.309 118.543 154.01 cv
118.409 154.153 118.487 154.443 118.659 154.443 cv
337.371 154.443 li
.823529 .847059 .847059 rgb
f
282.715 154.443 mo
282.801 154.443 282.84 154.153 282.773 154.01 cv
269.37 125.309 249.806 107.22 228.015 107.22 cv
206.224 107.22 186.66 125.309 173.257 154.01 cv
173.19 154.153 173.229 154.443 173.314 154.443 cv
282.715 154.443 li
.913725 .933333 .929412 rgb
f
340.188 182.405 mo
352.574 176.189 363.902 168.974 373.933 160.919 cv
374.121 160.768 374.012 160.462 373.77 160.462 cv
82.2596 160.462 li
82.0184 160.462 81.9087 160.768 82.0968 160.919 cv
92.1278 168.974 103.456 176.189 115.842 182.405 cv
115.958 182.433 li
340.071 182.433 li
340.188 182.405 li
.160784 .243137 .541176 rgb
f
312.061 182.433 mo
269.727 182.433 li
269.771 182.405 li
274.381 176.189 278.598 168.974 282.332 160.919 cv
282.402 160.768 282.361 160.462 282.271 160.462 cv
173.758 160.462 li
173.669 160.462 173.628 160.768 173.698 160.919 cv
177.432 168.974 181.649 176.189 186.259 182.405 cv
186.303 182.433 li
144.74 182.433 li
143.969 182.433 li
143.882 182.405 li
134.592 176.189 126.095 168.974 118.571 160.919 cv
118.43 160.768 118.513 160.462 118.694 160.462 cv
337.336 160.462 li
337.517 160.462 337.6 160.768 337.459 160.919 cv
329.935 168.974 321.438 176.189 312.148 182.405 cv
312.061 182.433 li
.2 .298039 .615686 rgb
f
269.727 182.433 mo
186.303 182.433 li
186.259 182.405 li
181.649 176.189 177.432 168.974 173.698 160.919 cv
173.628 160.768 173.669 160.462 173.758 160.462 cv
282.271 160.462 li
282.361 160.462 282.402 160.768 282.332 160.919 cv
278.598 168.974 274.381 176.189 269.771 182.405 cv
269.727 182.433 li
.278431 .4 .741176 rgb
f
300.03 186.141 mo
156 186.141 li
154.953 186.141 154.105 185.293 154.105 184.246 cv
154.105 183.199 154.953 182.351 156 182.351 cv
300.03 182.351 li
301.077 182.351 301.925 183.199 301.925 184.246 cv
301.925 185.293 301.077 186.141 300.03 186.141 cv
cp
.6 .615686 .615686 rgb
f
373.455 160.489 mo
82.1328 160.489 li
81.8001 160.489 81.5305 160.219 81.5305 159.887 cv
81.5305 154.932 li
81.5305 154.599 81.8001 154.329 82.1328 154.329 cv
373.455 154.329 li
373.788 154.329 374.057 154.599 374.057 154.932 cv
374.057 159.887 li
374.057 160.219 373.788 160.489 373.455 160.489 cv
cp
.168627 .713726 .45098 rgb
f
124.929 154.61 mo
109.375 154.61 li
107.835 154.61 106.576 155.869 106.576 157.409 cv
106.576 158.949 107.835 160.209 109.375 160.209 cv
124.929 160.209 li
126.468 160.209 127.728 158.949 127.728 157.409 cv
127.728 155.869 126.468 154.61 124.929 154.61 cv
cp
.282353 .572549 .611765 rgb
f
147.394 154.61 mo
141.38 154.61 li
139.841 154.61 138.581 155.869 138.581 157.409 cv
138.581 158.949 139.841 160.209 141.38 160.209 cv
147.394 160.209 li
148.934 160.209 150.194 158.949 150.194 157.409 cv
150.194 155.869 148.934 154.61 147.394 154.61 cv
cp
f
259.344 154.61 mo
253.33 154.61 li
251.79 154.61 250.53 155.869 250.53 157.409 cv
250.53 158.949 251.79 160.209 253.33 160.209 cv
259.344 160.209 li
260.883 160.209 262.143 158.949 262.143 157.409 cv
262.143 155.869 260.883 154.61 259.344 154.61 cv
cp
f
350.348 154.61 mo
344.334 154.61 li
342.794 154.61 341.534 155.869 341.534 157.409 cv
341.534 158.949 342.794 160.209 344.334 160.209 cv
350.348 160.209 li
351.888 160.209 353.147 158.949 353.147 157.409 cv
353.147 155.869 351.888 154.61 350.348 154.61 cv
cp
f
244.378 154.61 mo
228.825 154.61 li
227.285 154.61 226.025 155.869 226.025 157.409 cv
226.025 158.949 227.285 160.209 228.825 160.209 cv
244.378 160.209 li
245.918 160.209 247.177 158.949 247.177 157.409 cv
247.177 155.869 245.918 154.61 244.378 154.61 cv
cp
f
109.997 154.61 mo
97.5547 154.61 li
96.015 154.61 94.7552 155.869 94.7552 157.409 cv
94.7552 158.949 96.015 160.209 97.5547 160.209 cv
109.997 160.209 li
111.537 160.209 112.797 158.949 112.797 157.409 cv
112.797 155.869 111.537 154.61 109.997 154.61 cv
cp
.215686 .501961 .717647 rgb
f
164.952 154.61 mo
143.662 154.61 li
142.122 154.61 140.862 155.869 140.862 157.409 cv
140.862 158.949 142.122 160.209 143.662 160.209 cv
164.952 160.209 li
166.492 160.209 167.752 158.949 167.752 157.409 cv
167.752 155.869 166.492 154.61 164.952 154.61 cv
cp
f
208.64 154.61 mo
187.349 154.61 li
185.809 154.61 184.55 155.869 184.55 157.409 cv
184.55 158.949 185.809 160.209 187.349 160.209 cv
208.64 160.209 li
210.18 160.209 211.439 158.949 211.439 157.409 cv
211.439 155.869 210.18 154.61 208.64 154.61 cv
cp
f
178.639 154.61 mo
172.695 154.61 li
171.155 154.61 169.895 155.869 169.895 157.409 cv
169.895 158.949 171.155 160.209 172.695 160.209 cv
178.639 160.209 li
180.179 160.209 181.439 158.949 181.439 157.409 cv
181.439 155.869 180.179 154.61 178.639 154.61 cv
cp
f
276.902 154.61 mo
255.611 154.61 li
254.071 154.61 252.811 155.869 252.811 157.409 cv
252.811 158.949 254.071 160.209 255.611 160.209 cv
276.902 160.209 li
278.441 160.209 279.701 158.949 279.701 157.409 cv
279.701 155.869 278.441 154.61 276.902 154.61 cv
cp
f
290.588 154.61 mo
284.644 154.61 li
283.104 154.61 281.844 155.869 281.844 157.409 cv
281.844 158.949 283.104 160.209 284.644 160.209 cv
290.588 160.209 li
292.128 160.209 293.388 158.949 293.388 157.409 cv
293.388 155.869 292.128 154.61 290.588 154.61 cv
cp
f
367.906 154.61 mo
346.615 154.61 li
345.075 154.61 343.815 155.869 343.815 157.409 cv
343.815 158.949 345.075 160.209 346.615 160.209 cv
367.906 160.209 li
369.445 160.209 370.705 158.949 370.705 157.409 cv
370.705 155.869 369.445 154.61 367.906 154.61 cv
cp
f
229.447 154.61 mo
217.004 154.61 li
215.464 154.61 214.205 155.869 214.205 157.409 cv
214.205 158.949 215.464 160.209 217.004 160.209 cv
229.447 160.209 li
230.986 160.209 232.246 158.949 232.246 157.409 cv
232.246 155.869 230.986 154.61 229.447 154.61 cv
cp
f
335.555 154.61 mo
314.264 154.61 li
312.724 154.61 311.464 155.869 311.464 157.409 cv
311.464 158.949 312.724 160.209 314.264 160.209 cv
335.555 160.209 li
337.095 160.209 338.354 158.949 338.354 157.409 cv
338.354 155.869 337.095 154.61 335.555 154.61 cv
cp
f
149.192 154.61 mo
147.049 154.61 li
145.509 154.61 144.249 155.869 144.249 157.409 cv
144.249 158.949 145.509 160.209 147.049 160.209 cv
149.192 160.209 li
150.731 160.209 151.991 158.949 151.991 157.409 cv
151.991 155.869 150.731 154.61 149.192 154.61 cv
cp
.517647 .780392 .623529 rgb
f
261.141 154.61 mo
258.998 154.61 li
257.458 154.61 256.198 155.869 256.198 157.409 cv
256.198 158.949 257.458 160.209 258.998 160.209 cv
261.141 160.209 li
262.681 160.209 263.94 158.949 263.94 157.409 cv
263.94 155.869 262.681 154.61 261.141 154.61 cv
cp
f
352.145 154.61 mo
350.002 154.61 li
348.462 154.61 347.203 155.869 347.203 157.409 cv
347.203 158.949 348.462 160.209 350.002 160.209 cv
352.145 160.209 li
353.685 160.209 354.945 158.949 354.945 157.409 cv
354.945 155.869 353.685 154.61 352.145 154.61 cv
cp
f
206.497 154.61 mo
190.944 154.61 li
189.404 154.61 188.144 155.869 188.144 157.409 cv
188.144 158.949 189.404 160.209 190.944 160.209 cv
206.497 160.209 li
208.037 160.209 209.297 158.949 209.297 157.409 cv
209.297 155.869 208.037 154.61 206.497 154.61 cv
cp
f
305.554 154.61 mo
299.609 154.61 li
298.07 154.61 296.81 155.869 296.81 157.409 cv
296.81 158.949 298.07 160.209 299.609 160.209 cv
305.554 160.209 li
307.094 160.209 308.354 158.949 308.354 157.409 cv
308.354 155.869 307.094 154.61 305.554 154.61 cv
cp
f
333.412 154.61 mo
317.859 154.61 li
316.319 154.61 315.059 155.869 315.059 157.409 cv
315.059 158.949 316.319 160.209 317.859 160.209 cv
333.412 160.209 li
334.952 160.209 336.212 158.949 336.212 157.409 cv
336.212 155.869 334.952 154.61 333.412 154.61 cv
cp
f
86.9785 154.61 mo
84.6974 154.61 li
83.1576 154.61 81.8978 155.869 81.8978 157.409 cv
81.8978 158.949 83.1576 160.209 84.6974 160.209 cv
86.9785 160.209 li
88.5183 160.209 89.7781 158.949 89.7781 157.409 cv
89.7781 155.869 88.5183 154.61 86.9785 154.61 cv
cp
f
115.909 132.461 mo
340.121 132.461 li
323.646 124.199 305.294 117.711 285.611 113.382 cv
170.419 113.382 li
150.736 117.711 132.384 124.199 115.909 132.461 cv
.556863 .831373 .960784 rgb
f
115.909 132.461 mo
340.121 132.461 li
323.646 124.199 305.294 117.711 285.611 113.382 cv
170.419 113.382 li
150.736 117.711 132.384 124.199 115.909 132.461 cv
0 .682353 .937255 rgb
f
311.365 132.461 mo
270.077 132.461 li
185.953 132.461 li
175.861 132.461 li
176.044 132.316 176.227 132.166 176.408 132.012 cv
180.321 128.687 182.2 124.47 180.605 122.593 cv
180.09 121.987 179.276 121.7 178.277 121.7 cv
176.184 121.7 173.282 122.965 170.633 125.217 cv
167.868 127.566 166.119 130.361 165.893 132.461 cv
144.665 132.461 li
156.914 124.199 170.559 117.711 185.193 113.382 cv
187.689 113.382 li
184.466 115.003 182.485 117.489 183.213 119.1 cv
183.613 119.986 184.75 120.433 186.25 120.433 cv
187.635 120.433 189.329 120.051 191.034 119.282 cv
194.526 117.706 196.765 115.088 196.107 113.382 cv
270.837 113.382 li
285.471 117.711 299.116 124.199 311.365 132.461 cv
.333333 .839216 .972549 rgb
f
196.107 113.382 mo
187.689 113.382 li
187.872 113.29 188.06 113.201 188.25 113.115 cv
189.955 112.345 191.649 111.964 193.034 111.964 cv
194.534 111.964 195.672 112.411 196.072 113.296 cv
196.084 113.324 196.096 113.353 196.107 113.382 cv
.894118 .909804 .909804 rgb
f
186.25 120.433 mo
184.75 120.433 183.613 119.986 183.213 119.1 cv
182.485 117.489 184.466 115.003 187.689 113.382 cv
196.107 113.382 li
196.765 115.088 194.526 117.706 191.034 119.282 cv
189.329 120.051 187.635 120.433 186.25 120.433 cv
.6 .901961 .984314 rgb
f
168.764 135.529 mo
167.765 135.529 166.951 135.242 166.436 134.636 cv
165.968 134.085 165.799 133.333 165.893 132.461 cv
175.861 132.461 li
173.365 134.431 170.713 135.529 168.764 135.529 cv
.894118 .909804 .909804 rgb
f
175.861 132.461 mo
165.893 132.461 li
166.119 130.361 167.868 127.566 170.633 125.217 cv
173.282 122.965 176.184 121.7 178.277 121.7 cv
179.276 121.7 180.09 121.987 180.605 122.593 cv
182.2 124.47 180.321 128.687 176.408 132.012 cv
176.227 132.166 176.044 132.316 175.861 132.461 cv
.6 .901961 .984314 rgb
f
122.855 154.61 mo
120.574 154.61 li
119.034 154.61 117.774 155.869 117.774 157.409 cv
117.774 158.949 119.034 160.209 120.574 160.209 cv
122.855 160.209 li
124.395 160.209 125.654 158.949 125.654 157.409 cv
125.654 155.869 124.395 154.61 122.855 154.61 cv
cp
.929412 .47451 .541176 rgb
f
242.304 154.61 mo
240.023 154.61 li
238.483 154.61 237.223 155.869 237.223 157.409 cv
237.223 158.949 238.483 160.209 240.023 160.209 cv
242.304 160.209 li
243.844 160.209 245.104 158.949 245.104 157.409 cv
245.104 155.869 243.844 154.61 242.304 154.61 cv
cp
f
204.423 154.61 mo
202.142 154.61 li
200.602 154.61 199.342 155.869 199.342 157.409 cv
199.342 158.949 200.602 160.209 202.142 160.209 cv
204.423 160.209 li
205.963 160.209 207.223 158.949 207.223 157.409 cv
207.223 155.869 205.963 154.61 204.423 154.61 cv
cp
f
323.043 154.61 mo
320.762 154.61 li
319.222 154.61 317.962 155.869 317.962 157.409 cv
317.962 158.949 319.222 160.209 320.762 160.209 cv
323.043 160.209 li
324.583 160.209 325.843 158.949 325.843 157.409 cv
325.843 155.869 324.583 154.61 323.043 154.61 cv
cp
f
161.553 570.924 mo
161.546 571.311 161.523 571.694 161.523 572.082 cv
161.523 609.367 191.749 639.593 229.034 639.593 cv
266.319 639.593 296.545 609.367 296.545 572.082 cv
296.545 571.694 296.522 571.311 296.516 570.924 cv
161.553 570.924 li
.768627 .537255 .196078 rgb
f
229.034 504.571 mo
191.749 504.571 161.523 534.797 161.523 572.082 cv
161.529 572.309 li
296.539 572.309 li
296.545 572.082 li
296.545 534.797 266.319 504.571 229.034 504.571 cv
.0235294 .670588 .847059 rgb
f
287.54 562.828 mo
181.145 562.828 li
181.14 562.648 li
181.14 550.777 184.959 539.808 191.426 530.92 cv
192.795 531.577 194.578 531.906 196.629 531.906 cv
200.174 531.906 204.517 530.92 208.885 528.933 cv
217.934 524.816 223.669 517.96 221.695 513.62 cv
221.216 512.569 220.33 511.761 219.133 511.2 cv
223.951 509.752 229.057 508.975 234.342 508.975 cv
263.725 508.975 287.544 533.005 287.544 562.648 cv
287.54 562.828 li
.490196 .827451 .921569 rgb
f
234.342 635.757 mo
263.725 635.757 287.544 611.727 287.544 582.084 cv
287.54 581.904 li
181.145 581.904 li
181.14 582.084 li
181.14 611.727 204.96 635.757 234.342 635.757 cv
.984314 .690196 .25098 rgb
f
357.183 575.341 mo
100.885 575.341 li
100.885 568.873 li
357.183 568.873 li
357.183 575.341 li
cp
0 .454902 .580392 rgb
f
240.555 623.161 mo
240.555 631.645 235.397 638.523 229.034 638.523 cv
222.671 638.523 217.513 631.645 217.513 623.161 cv
217.513 614.677 222.671 607.8 229.034 607.8 cv
235.397 607.8 240.555 614.677 240.555 623.161 cv
.00784314 .666667 .698039 rgb
f
237.119 628.417 mo
237.119 632.882 233.5 636.502 229.034 636.502 cv
224.569 636.502 220.949 632.882 220.949 628.417 cv
220.949 623.951 224.569 620.332 229.034 620.332 cv
233.5 620.332 237.119 623.951 237.119 628.417 cv
.00784314 .427451 .45098 rgb
f
385.766 565.603 mo
337.392 552.779 li
314.807 546.791 291.541 543.759 268.176 543.759 cv
228.388 543.759 li
227.2 543.759 li
187.412 543.759 li
164.047 543.759 140.781 546.791 118.196 552.779 cv
69.8222 565.603 li
67.6318 566.184 68.1346 568.873 70.4336 568.873 cv
227.2 568.873 li
228.388 568.873 li
385.154 568.873 li
387.453 568.873 387.956 566.184 385.766 565.603 cv
cp
.00784314 .666667 .698039 rgb
f
385.766 577.493 mo
337.392 590.317 li
314.807 596.305 291.541 599.337 268.176 599.337 cv
228.388 599.337 li
227.2 599.337 li
187.412 599.337 li
164.047 599.337 140.781 596.305 118.196 590.317 cv
69.8222 577.493 li
67.6318 576.912 68.1346 574.223 70.4336 574.223 cv
227.2 574.223 li
228.388 574.223 li
385.154 574.223 li
387.453 574.223 387.956 576.912 385.766 577.493 cv
cp
.00784314 .427451 .45098 rgb
f
334.067 565.603 mo
301.525 552.779 li
286.331 546.791 270.679 543.759 254.96 543.759 cv
228.194 543.759 li
227.394 543.759 li
200.628 543.759 li
184.909 543.759 169.257 546.791 154.063 552.779 cv
121.521 565.603 li
120.047 566.184 120.385 568.873 121.932 568.873 cv
227.394 568.873 li
228.194 568.873 li
333.656 568.873 li
335.203 568.873 335.541 566.184 334.067 565.603 cv
cp
.00784314 .792157 .831373 rgb
f
280.996 565.603 mo
264.705 552.779 li
257.099 546.791 249.263 543.759 241.394 543.759 cv
227.994 543.759 li
227.594 543.759 li
214.194 543.759 li
206.325 543.759 198.489 546.791 190.883 552.779 cv
174.592 565.603 li
173.854 566.184 174.023 568.873 174.798 568.873 cv
227.594 568.873 li
227.994 568.873 li
280.79 568.873 li
281.565 568.873 281.734 566.184 280.996 565.603 cv
cp
.00784314 .941176 .988235 rgb
f
334.067 577.493 mo
301.525 590.317 li
286.331 596.305 270.679 599.337 254.96 599.337 cv
228.194 599.337 li
227.394 599.337 li
200.628 599.337 li
184.909 599.337 169.257 596.305 154.063 590.317 cv
121.521 577.493 li
120.047 576.912 120.385 574.223 121.932 574.223 cv
227.394 574.223 li
228.194 574.223 li
333.656 574.223 li
335.203 574.223 335.541 576.912 334.067 577.493 cv
cp
.00784314 .666667 .698039 rgb
f
279.624 577.493 mo
263.753 590.317 li
256.343 596.305 248.709 599.337 241.043 599.337 cv
227.989 599.337 li
227.599 599.337 li
214.545 599.337 li
206.879 599.337 199.245 596.305 191.835 590.317 cv
175.964 577.493 li
175.246 576.912 175.411 574.223 176.165 574.223 cv
227.599 574.223 li
227.989 574.223 li
279.423 574.223 li
280.177 574.223 280.342 576.912 279.624 577.493 cv
cp
.00784314 .792157 .831373 rgb
f
287.112 547.692 mo
170.956 547.692 li
168.649 547.692 166.779 545.822 166.779 543.515 cv
166.779 541.208 168.649 539.337 170.956 539.337 cv
287.112 539.337 li
289.419 539.337 291.29 541.208 291.29 543.515 cv
291.29 545.822 289.419 547.692 287.112 547.692 cv
cp
.00784314 .666667 .698039 rgb
f
191.426 530.92 mo
190.259 530.36 189.394 529.563 188.924 528.529 cv
186.949 524.189 192.685 517.333 201.734 513.216 cv
206.102 511.229 210.444 510.243 213.99 510.243 cv
216.011 510.243 217.772 510.563 219.133 511.2 cv
207.889 514.578 198.204 521.606 191.426 530.92 cv
.415686 .803922 .909804 rgb
f
196.629 531.906 mo
194.578 531.906 192.795 531.577 191.426 530.92 cv
198.204 521.606 207.889 514.578 219.133 511.2 cv
220.33 511.761 221.216 512.569 221.695 513.62 cv
223.669 517.96 217.934 524.816 208.885 528.933 cv
204.517 530.92 200.174 531.906 196.629 531.906 cv
.694118 .898039 .952941 rgb
f
289.546 602.773 mo
167.691 602.773 li
166.041 602.773 164.691 601.423 164.691 599.773 cv
164.691 599.773 li
164.691 598.122 166.041 596.772 167.691 596.772 cv
289.546 596.772 li
291.197 596.772 292.547 598.122 292.547 599.773 cv
292.547 599.773 li
292.547 601.423 291.197 602.773 289.546 602.773 cv
cp
0 .454902 .580392 rgb
f
229.034 620.332 mo
227.407 620.332 225.896 620.816 224.628 621.643 cv
224.628 691.076 li
233.117 691.076 li
233.117 621.447 li
231.918 620.742 230.525 620.332 229.034 620.332 cv
.345098 .34902 .356863 rgb
f
228.873 620.333 mo
228.887 620.332 228.902 620.332 228.917 620.332 cv
228.925 620.332 228.934 620.332 228.942 620.332 cv
228.935 620.332 228.928 620.332 228.921 620.332 cv
228.92 620.332 228.92 620.332 228.919 620.332 cv
228.903 620.333 228.888 620.333 228.873 620.333 cv
.482353 .827451 .843137 rgb
f
228.872 620.333 mo
228.873 620.333 228.873 620.333 228.873 620.333 cv
228.888 620.333 228.903 620.333 228.919 620.332 cv
228.903 620.333 228.888 620.333 228.872 620.333 cv
228.921 620.332 mo
228.928 620.332 228.935 620.332 228.942 620.332 cv
228.942 620.332 228.942 620.332 228.942 620.332 cv
228.935 620.332 228.928 620.332 228.921 620.332 cv
.482353 .701961 .713725 rgb
f
230.04 691.076 mo
227.705 691.076 li
227.705 621.643 li
228.042 620.844 228.442 620.364 228.872 620.333 cv
228.888 620.333 228.903 620.333 228.919 620.332 cv
228.92 620.332 228.92 620.332 228.921 620.332 cv
228.928 620.332 228.935 620.332 228.942 620.332 cv
229.343 620.349 229.717 620.757 230.04 621.447 cv
230.04 691.076 li
.658823 .658823 .662745 rgb
f
206.924 697.545 mo
207.329 691.257 217.116 686.225 229.138 686.225 cv
241.161 686.225 250.948 691.257 251.353 697.545 cv
206.924 697.545 li
cp
.00784314 .666667 .698039 rgb
f
229.138 690.533 mo
238.238 690.533 246.053 693.417 249.493 697.545 cv
208.784 697.545 li
212.224 693.417 220.039 690.533 229.138 690.533 cv
cp
.00784314 .427451 .45098 rgb
f
277.604 608.354 mo
271.869 616.261 264.311 622.759 255.543 627.226 cv
255.565 629.388 256.213 631.344 257.558 632.849 cv
261.607 637.379 270.401 636.126 277.198 630.051 cv
283.996 623.975 286.225 615.377 282.176 610.847 cv
281 609.531 279.415 608.718 277.604 608.354 cv
f
271.172 631.333 mo
270.213 630.494 271.703 627.222 274.501 624.024 cv
277.299 620.827 280.344 618.915 281.304 619.754 cv
282.263 620.594 280.772 623.866 277.975 627.064 cv
275.177 630.261 272.131 632.173 271.172 631.333 cv
.00784314 .592157 .619608 rgb
f
277.232 621.363 mo
276.349 622.081 275.412 622.982 274.501 624.024 cv
273.24 625.465 272.249 626.919 271.623 628.16 cv
316.241 692.128 li
323.204 687.271 li
277.232 621.363 li
.345098 .34902 .356863 rgb
f
320.208 690.405 mo
319.718 689.702 li
321.714 688.31 li
322.204 689.013 li
320.208 690.405 li
1 1 1 rgb
f
319.718 689.702 mo
274.175 624.408 li
274.283 624.28 274.389 624.152 274.501 624.024 cv
274.954 623.507 275.413 623.027 275.869 622.583 cv
321.714 688.31 li
319.718 689.702 li
.658823 .658823 .662745 rgb
f
341.122 697.545 mo
340.717 691.257 330.93 686.225 318.907 686.225 cv
306.885 686.225 297.097 691.257 296.692 697.545 cv
341.122 697.545 li
cp
.00784314 .666667 .698039 rgb
f
318.907 690.533 mo
309.808 690.533 301.993 693.417 298.553 697.545 cv
339.261 697.545 li
335.821 693.417 328.006 690.533 318.907 690.533 cv
cp
.00784314 .427451 .45098 rgb
f
179.589 608.354 mo
185.324 616.261 192.882 622.759 201.65 627.226 cv
201.628 629.388 200.98 631.344 199.635 632.849 cv
195.586 637.379 186.793 636.126 179.995 630.051 cv
173.197 623.975 170.969 615.377 175.017 610.847 cv
176.194 609.531 177.778 608.718 179.589 608.354 cv
f
186.021 631.333 mo
186.98 630.494 185.49 627.222 182.692 624.024 cv
179.894 620.827 176.849 618.915 175.89 619.754 cv
174.93 620.594 176.421 623.866 179.218 627.064 cv
182.016 630.261 185.062 632.173 186.021 631.333 cv
.00784314 .592157 .619608 rgb
f
179.961 621.363 mo
180.844 622.081 181.781 622.982 182.692 624.024 cv
183.953 625.465 184.944 626.919 185.57 628.16 cv
140.952 692.128 li
133.989 687.271 li
179.961 621.363 li
.345098 .34902 .356863 rgb
f
136.985 690.405 mo
134.989 689.013 li
135.479 688.31 li
137.475 689.702 li
136.985 690.405 li
1 1 1 rgb
f
137.475 689.702 mo
135.479 688.31 li
181.324 622.583 li
181.78 623.027 182.239 623.507 182.692 624.024 cv
182.804 624.152 182.911 624.28 183.018 624.408 cv
137.475 689.702 li
.658823 .658823 .662745 rgb
f
116.071 697.545 mo
116.476 691.257 126.264 686.225 138.286 686.225 cv
150.308 686.225 160.096 691.257 160.501 697.545 cv
116.071 697.545 li
cp
.00784314 .666667 .698039 rgb
f
138.286 690.533 mo
147.385 690.533 155.2 693.417 158.64 697.545 cv
117.932 697.545 li
121.372 693.417 129.187 690.533 138.286 690.533 cv
cp
.00784314 .427451 .45098 rgb
f
212.095 540.701 mo
211.183 540.701 li
209.876 540.701 208.807 541.77 208.807 543.076 cv
208.807 544.382 209.876 545.451 211.183 545.451 cv
212.095 545.451 li
213.401 545.451 214.47 544.382 214.47 543.076 cv
214.47 541.77 213.401 540.701 212.095 540.701 cv
cp
.0235294 .670588 .847059 rgb
f
260.839 540.701 mo
252.625 540.701 li
251.318 540.701 250.249 541.77 250.249 543.076 cv
250.249 544.382 251.318 545.451 252.625 545.451 cv
260.839 545.451 li
262.145 545.451 263.214 544.382 263.214 543.076 cv
263.214 541.77 262.145 540.701 260.839 540.701 cv
cp
f
180.795 540.701 mo
172.581 540.701 li
171.274 540.701 170.205 541.77 170.205 543.076 cv
170.205 544.382 171.274 545.451 172.581 545.451 cv
180.795 545.451 li
182.101 545.451 183.17 544.382 183.17 543.076 cv
183.17 541.77 182.101 540.701 180.795 540.701 cv
cp
.00784314 .792157 .831373 rgb
f
226.491 540.701 mo
218.277 540.701 li
216.97 540.701 215.901 541.77 215.901 543.076 cv
215.901 544.382 216.97 545.451 218.277 545.451 cv
226.491 545.451 li
227.797 545.451 228.866 544.382 228.866 543.076 cv
228.866 541.77 227.797 540.701 226.491 540.701 cv
cp
f
275.517 540.701 mo
267.303 540.701 li
265.997 540.701 264.928 541.77 264.928 543.076 cv
264.928 544.382 265.997 545.451 267.303 545.451 cv
275.517 545.451 li
276.824 545.451 277.892 544.382 277.892 543.076 cv
277.892 541.77 276.824 540.701 275.517 540.701 cv
cp
f
200.035 540.701 mo
199.123 540.701 li
197.816 540.701 196.747 541.77 196.747 543.076 cv
196.747 544.382 197.816 545.451 199.123 545.451 cv
200.035 545.451 li
201.341 545.451 202.41 544.382 202.41 543.076 cv
202.41 541.77 201.341 540.701 200.035 540.701 cv
cp
f
246.443 540.701 mo
245.531 540.701 li
244.224 540.701 243.155 541.77 243.155 543.076 cv
243.155 544.382 244.224 545.451 245.531 545.451 cv
246.443 545.451 li
247.749 545.451 248.818 544.382 248.818 543.076 cv
248.818 541.77 247.749 540.701 246.443 540.701 cv
cp
f
191.524 540.701 mo
181.075 540.701 li
179.768 540.701 178.7 541.77 178.7 543.076 cv
178.7 544.382 179.768 545.451 181.075 545.451 cv
191.524 545.451 li
192.831 545.451 193.9 544.382 193.9 543.076 cv
193.9 541.77 192.831 540.701 191.524 540.701 cv
cp
.984314 .690196 .25098 rgb
f
286.247 540.701 mo
275.797 540.701 li
274.491 540.701 273.422 541.77 273.422 543.076 cv
273.422 544.382 274.491 545.451 275.797 545.451 cv
286.247 545.451 li
287.553 545.451 288.622 544.382 288.622 543.076 cv
288.622 541.77 287.553 540.701 286.247 540.701 cv
cp
f
218.296 540.701 mo
207.846 540.701 li
206.54 540.701 205.471 541.77 205.471 543.076 cv
205.471 544.382 206.54 545.451 207.846 545.451 cv
218.296 545.451 li
219.602 545.451 220.671 544.382 220.671 543.076 cv
220.671 541.77 219.602 540.701 218.296 540.701 cv
cp
f
190.034 540.701 mo
189.122 540.701 li
187.815 540.701 186.747 541.77 186.747 543.076 cv
186.747 544.382 187.815 545.451 189.122 545.451 cv
190.034 545.451 li
191.341 545.451 192.409 544.382 192.409 543.076 cv
192.409 541.77 191.341 540.701 190.034 540.701 cv
cp
1 .94902 0 rgb
f
284.756 540.701 mo
283.844 540.701 li
282.538 540.701 281.469 541.77 281.469 543.076 cv
281.469 544.382 282.538 545.451 283.844 545.451 cv
284.756 545.451 li
286.063 545.451 287.132 544.382 287.132 543.076 cv
287.132 541.77 286.063 540.701 284.756 540.701 cv
cp
f
252.644 540.701 mo
242.194 540.701 li
240.888 540.701 239.819 541.77 239.819 543.076 cv
239.819 544.382 240.888 545.451 242.194 545.451 cv
252.644 545.451 li
253.95 545.451 255.019 544.382 255.019 543.076 cv
255.019 541.77 253.95 540.701 252.644 540.701 cv
cp
f
234.383 540.701 mo
233.471 540.701 li
232.164 540.701 231.095 541.77 231.095 543.076 cv
231.095 544.382 232.164 545.451 233.471 545.451 cv
234.383 545.451 li
235.689 545.451 236.758 544.382 236.758 543.076 cv
236.758 541.77 235.689 540.701 234.383 540.701 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.1
%%For: (User) ()
%%Title: (alien_ship.eps)
%%CreationDate: 8/12/2016 10:30 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2N<dP1TJ^9;>OK<pY)!7U4%h9D,@"VZ[u"N\<=`brSc]u3Qa1*<+Fr`5;1;7F"]+icM$3AY;A=dE$`g/X:O(@o^VUKVG<
%k*uCPB9^W?V'm3S@2\/ks0o6%]QWXbi[qGCr.euP6U`g_2ClJPgZT]dRh`E].5\_M]<e(Xr,N^D"6U<2EAHugcYNO(j?9D]%DU$P
%)/#e7kE_S(]$npnX?o2>N.1]9"2BEtn2%o*Zb8DM:>B_'joTt[\Au4,Gt>jRs&o8ElsA7(h6te72&i0SY\A!9Mlok2Q6X+ocIOc[
%r`On-1I_&Tl$6PhAgV6r+1k/`ls_trfKr,aI`5_<7fOn95N4>.Kn/*R<JLO5Re;0IcY>qmk[L'WUEY_lM?[>-kQZF:qEJA9"!D-:
%-A`F!FmCX*l+462\tW_pbc:G&q2_1'X8t1hMON(;=BJSFg-!8i1Wt&urpZCHX6fha\Ne\%cX!I6[f+1h[C[fos2(N+SDf*]H_/u@
%h5GIIC8)qWXM[?1l?Y.#o^e7/d)nsOd_G_rVb[-;m/fd9]cJfD\hqRQ?G5_'EfoTcIuqR6gGj&aTo#p-*GEQ;/VEgS9=6RaWWu1n
%o*f-FGdO,mYLj#%&9McX\3*9sLPP9NAZ`4T"2.C#53CO9]2jn.e5S5ip_S(D[A<iU_>jGD!p8=AgBaaoe?d#C`9KtghulR,BiGJb
%3\E]'s3(S/2h:qAk,&)poETdL?1_;a/d+.\fn:Hs)VFS0rpQ]Yc8n&XHLU$6]@gue2(k?tq7jmR[<_1PhRJhgZOMgrboE=)K0PYW
%M^4%Fe$`2+52bn6:"H;OQH""PGdcFep_J<OIg5qFk4^!nTIurK"E^R3_tBHMWFO=.9ohf9dr="YqBG:1>l+QZ3'aC?95Ng8hkfTO
%R&'ssTjFZlUAkf7Up&2T<N\4U\fdBhmf%%2YAqCYXqN8<1nC4C]A:V0Z<JFI-QO9hh((/ZDPPnlBd*J7k_ukbYV\KY*7(Zk[[kuL
%Xcgf8H_%4]Bs[&X]asm%*(g-i^;=6S7&0(V)i"lR:]IABKB.QUil#c4GdQsAK1:GGB5*T\0K[f'W2Ll633pfN:Bu-Y>WYa#N$lC*
%k=r/2WJA11O<]jW>/bPYIW`5>.c#2ETudb<;>dJV:-SGB<;P@Ei3HY<)W3#S:3s=N)p)]uhEp*TF)pBL>bY'Ang*MK3!6c>gTB#V
%Yni<JildNE]:bh.kb>/4T/5g&f=Q\+9CP10F0Sb3GJ\(o)Y;KKB(;M)f75MUJH5)kH*?Oc,$TVQ\TZ_![]*N^]P?2<:^].e[Kkq?
%r"B%[rInq&Q]"O7(7$^k-dZSf1>_5Mj7W=N=)RErW]R"^_l8Q+0S?%Wb#G/-ZW?I"V81)h2^r:cT^kkc2#`n\'RllDiRd-eaR,P[
%][i?h`l=cOX/<Z9)bg[--99OQ?p,R/$dr;p8#8I'ep8V_.at7.]=mnu`/]h74.\Lm=(B>bG!6cmbUUVW<6h%p>ACe-H[pA[R7su[
%'QU]ej,n,hSXu1fJcuT2KheCgd]J)d2]ee*[DOOf)SqB?SeQ51GcVgsqI-5dr()O+gc2.9))cImC?"9=UjG-tBh7h::&ZT-U0;'Z
%$H<Jo[[Ing@@T"]NFp@N3tQM1^a3_V.>1Hb]lqBN("n0q99a1F-8$qcK68Rl9-Gp;Bbod2N1[mhdCmV;bX8oi6t[R`9bRl?'$BJ1
%;!rfXPe1Tji#d7uS$gPt$0G,2,3H/c4I5lfaJI7Wo2omfV.^pnc"";0/2s]9S:7qV\Q%e:81_6MhLT>m*>6gCcfNt)Y'4pJ<1?*j
%H\62OiuMQ9.*0)-o.mF#AuAib\j'q/0:U+*QCCYWYB-m+bYnCJQnq;e@+XXc3]3gt+-,0!qopSBXdV_]=!srue)6<WX&g[If$fJr
%e8)8M`C7i7Nf\u5QM!V^D'l+76WY,*q'pK*j6+t^\0Ya"IX,XJK7:F(nQ^r,O%um,iDeTrMN\OD=S''qp`hW"_#CPs9Q"Gs`L4U+
%7\kC&dk3HrSZ^F4K2qqI-AJ.U*l4Cs>0VeK,6Xd6b\4esC+)[]&l!^0b`l(?9R/`/6%(4>rgNtKs%_@i3,7"_h/^(8f?3!?`ec@K
%A`%En8Z1a+H%Ge:^smZ7s4]`_m-JadRg)FBW*O0f('>LMMR??L[d.?.O;JK(<'/=UC"2VE"LW0:FVojG$jSZmC2*sSU!p/eYNg!a
%c(=K"=iJ.c?Tt1=;jS!gc]-s,&V&MNlV0.JZVo7li3k:EUuY3q46Zq9DQ_#eS]/7aB3s[U&05q\WdKa>\4h6Q1DPC6Gu?H-G?/B8
%]mSRWs-mJmDLQK`/tC[(fb?r1gJ50-91+i7iM;dP>/O#'mUU-W=%^_8i%Qs6Z>%nMQKo[nR_RNl\$#44_%]@R$H%t9)Ol%1Fr-Cp
%>rjd.k2arqH2ThP_d02e]aNhj@aA_2jEgs+2#`ekcYsWc*BY12MR00ces/'5j,BSt5>U;Jc\`dUdqAPVP`c!fg&@u4^0*0Q1O_X+
%YW="3B[RqtR..Y>1e]e*"XJ</FIoC<X-k[qBonbZXc?YDc)8FDdqH8JM<iQ1*bk>BqL11Kr/O_B&DeDArgum:g(\=nQKM4PI/`6C
%C!EHqWB8I4MQO=TLifBSQSNt2=mY0nK]utb+"h4deJ`GmD,cC_g?dIj>J<RHOuc?#$oU^L9XfID[2.4D*GH"IcK'Bq.H9UFOnod5
%h">H+/lEH0?.:ti?,_g_6#U5"op7IpmU[m8iO>9j.UK793[orj.um]I=!1FL'K)Eq;N595"fjYK9!@(jYsC#f,r_D0>)r@+q3?R)
%5i6^TG"U"->#)@$\nF%gBf#lKRhQo\Qf>[m9NS@InA31&//L48'NQ[L<k"JDp1mD5LD90;]KF$g05::Cf-oL)@LJGf.ob!Q0d^'u
%1pV'=[<a<n]^iODE!J"->IEUY-rU_N<UNa28fD5P-%.MO7%'qMCb!`!G$2T/Ns8YIV'n,tMN[*'[[F0b8]-"`@X;Y!(+"ZM3?tp[
%WL.GsCJjMQnZ:NB>*Lkbb\L)<[4)'0[@,X@9NeGQV?#^qetStgLf85emSYW/)J!I!URq-^PZ2EQmF#uUCJcR*W>6ch1:&1t\%,-f
%M`!Akf('#KA!1UfgR%*"WplI\`9^c)0fod5=(a80);M4g$ZgZ-7Cj/pm$9FqZY7,%AGkRKrCm.+Z9.gUndTN*RHq8MkVYQUCFMe.
%f5#H@2V2_#U"=JA!1CH7GKX95EDbn&D6DFg\$arF=h@VXg0C]'[G(Yf<g.`\c6fd14`)H96%V>WP+AQ]^pt<<>`?n;(o8@k>`@fS
%']U&uaVZH6p]T$cWG;4([Zg:%5WKh7rc,UrchV^,bGP@gK$aF4TbKn0]Ck=5.gotVns3ISl<_sY_]R`oQ$'K>Vcui;EaEKB.Fde4
%]el8qhFo^HSb]rUo6Y3NMT38dpUQ6(2J2t5'UD2lhWuSRal&:i)lf'0#5h]I_#H=N1]77WI$+4da$M*hJ_]>+QYCN#madkVs$EA?
%RJP]<%unn/&Uui`rYNcQB4Hj/l;*WT<E-<9Mj.+KVHlDfRe9^f"/5$hDj[-m6[^ja78O8oRn52n+rb\gXFs&L$u@c*"@<G8L@$G/
%E6our3iBb:N<6hcT`.Zl%`@dpiP6dq_[SchWOI^Z]@OZq]A5:jI\prAc&Be=fuUpMq;Rr!P-_Y1EPo2TR:;ib8\b*#n*KHAhXZqZ
%oDRQ\<P.l$htd9?r*>K]rpR)4BYOL.huB89s5(?]Lc`DPZB<S!SF?8KBkD/'o-Nukht`l4I*_PabONdK]]RQ1$f]\hYI`(g[=VIZ
%VHBAL%jkm[e&os-b.HM?Xf!#:C@1#Tf5V2C#5FjN1od8<(DHBY;Q0.mqZ7bl[#5]<539@og+BGQ-[3W[V8h`%T+IK)aQ=AGH%p.,
%+e*,cAiiAGb$DaaBsQKC0Qr%FfZ%LWFW2:X-+Y%']5!\WN?>R*kB8f<DKV`-FrEaB[HI@l8T:;e,+[ur[oVs?LV;%NPGt5:UpuMa
%5f`QUYE\i=WU5Af1rUA%Zt7aE'<OtXMEms'X65m]HVd1U3F=U=5"p+iU!n$4i!$Uig<"mPmJ!I83Zmr4AG#_J1=]jqcZ\KD(5,IB
%6888X4Rk1&]Z_$Bo>Jg7nM3nQbS)Z$`627UKkV<bGk&*oP^f)K?D][`SL7`]P'ECb*kXRW5#[Y13q3<DREcr2[3N)'m[AtO-!B@Z
%UIf3tftM8Hbln.>b9j(gLM=M>,0bfZdsft<qEhRR[u,D'U5?Y[PfJH)p$Rr@)k(];)ojC.BQN2n*U>EH`pk\:`,rnqA8WNfhk82P
%D4KM!FLQ-q]"tu'DdSsj^,.8sc0_'m>WL?schSeCs!sEMh5sWO.IPcUT?<cEQXJs:Z_r$rZ8t\F`/53,R2g"=_'-d5X41go`FJ2@
%=7bFGj*"9<g28dE8tIo.59q6K(Lr!Q=l$\-$r#EugssHNk7QF=MpRig/<&c=.lUbq:tT_b(6@]od.phFVQ-`hgJ&$C<G&$l-B15L
%6$G"'&nr?&$2T9O*b0ZPniVsfK96/+k:pQsVO@6BL33al(hmrVk:rhld[`7`TB@rkH&QHAR<]i`T#[4\49e8g>piW(dQB_*$h;n=
%gSo98mq&hkVVYSUDCf55mO*Tajd)rm-<$n39lX1U\^POkD>/D'D,esYd#%H0>G)\`T:*6rVpRWkf".,TH-fZ*!8F'q]MuqhA$%,4
%>ac%W)SPtjW/r+#Y`]r$1],F8GRb2Br1]mAekj\2k=L<Ur-"[RGp+!kAj)-6TOsD)jDNg1Uh!E:GLUK,ES6hF_]k'Z48Y?jh>U\O
%P=to1jP$9AQ2!B,[Ej1@YfnXG"m<@e%)HNGa4F4C#r@aE^"FR4H(m,iA:1in^/CX\,6_Fg:mplpY;@Y$J$E'cU<eSM:b^d'\76Hb
%h/R>cXDK=5=lo(Kic2BganXO[`i#c2qNG1^,lQ2;/D"Otk-<^VY3+logcV$p7s"98DB@'qUC`LK;E2VdB^RK@F*FiN9Za0A>%&Jt
%c,7*,N*H]BS;21WE,H`BrN;TYLNEL%iLFns_RWY0bXa_&b3hM[QO\l:&*_q/S(5]jPK#l3j12c5ceZ!!$W8t3o*ZE_+3:9@5X-L>
%^s2ej'(buTkP%Tmi4Ta:7.0IkYM6T1@ku/>&):1TV"4Amk>\TC1'5sA3L*eBf6XIHDQ!BT99Z4GgJ*Ro;SF,61NJ]mT32c$&i/<;
%9%!+`'/NF):921S]n6W+[16JT=h%\ID78?Fqg"Il+LpT!S\7'VcK'[Nra8VTQhh/kPDYRHd>>9&@]]K/;%(VQ]u$?f[S-U/;V7hE
%Qg+.r(J_qD]4g`so)SKFcq+,lm`a=[oIgL-nV^/0Q9t;8s46JK<1@N/b=O9::N7V?lbQpWe(mpV8YJP,FTQdXr%7ZB=<hT[::IjJ
%ni%p_8tbN4/otrK$GF!\B/%l-_2TKTSf-u>KsMdBIKON#s!JJt085MsB"RY1X4_H1KOFG9\Pk>/MZ0>K2"uiEI3L&Q%*u:Z1bV[s
%o%a2'gkN?Q1f&;pma@mbI+Q9=?BH$+)bl4'dblfq?U'9t52A2o;8_!!eA<Z/K'Qi^@Q:U6iK-7l3W3"+C"KptFZ7i\$o;H8mog=/
%=6gnf[@nc)gc/'66CSq7ku`^T2i_V'@G6_$%AT)sJXh1A1:N7LD]<=DK04X"E*Ag(^S<l&B0H7Z/7t%imbf*LGO&9!]6qH]fW/Cl
%EW>r3hb3UNhgCoh.@K^aM<YRmQf;>(RF'nDU\Oitq@l99@nRom0OiCJ(3JNb)m*E@F_=*6g.Y"[?F,&69%KkD:#%>hkcS7^nb5ht
%9i?^Xrf2rf]5U?]C5Tf9l>Of>HWd5&TQBl]SVNc3o[!"Q'>Lk91U'r$k=Y)Yi."M89#.P3jLE[RG(&tQfI3/=[@)>A@qf7kSk4E8
%?DnR9$"ltiB&95qCC9spL"e61g(V\[9\TnuSb"\=3tp:=23T3n:'eU+Rsp=(T!1+%obs+UR8bDTM93&87`jG.2VXe/fqd;[h0ik#
%T4i3MKfF<&ppBEF3YuL:;OBeB^N!QY4R4`XNos+2d=U[2lUfE$++mUL9&=T[2ihp,QXAo%Q@GgNnh88GL6!H/jS"s][aV10O!,+Z
%5g\3-B&a/CTf\!0I<aV^X>T'WrptUm>P+I4^,tn3nF&_jaTNrTX#A;[9YT?K>\+D8L3)Uf1Pb?Ib]2F))=_R[n\!SP0^*u7dq7'5
%K7EVF<s-0C>KULT#lt\/l21_7L<L/_(cK8X.NMtJrDuk[J'pQj5CZmbQYUe@n4)mWaQ&1Jo4N^T6D7Z^#lNV2>5J`0o+K]/AG2g"
%Dg?6Q8BDk2^Oe3gr9'W'OCS&eQJ3`f+W/FDdnn!gbq_rp5+%dU(cHbLR].22@4F&m5u^4\1[fA:9i*kCmMGl1&"gQ:lmIlBF--4m
%=ijYC"(*+ELqq)3QloCc,9+i(Ca4KV<6*JSaRS&'f+l@ISKg%iTr<p3Z+6^Y#=VWmpg>V2li'Qo59@`245DgVNIc8/`4Q$n4l]oI
%kPpPlK4qahQL4tK^]$#-3jd6"<3F.,'[<qNNC.;p%=ViDo!GL#gPUlA`h*qThS7.EG<N/*;jrK=lQ!Of'udN]`lrHreI7GKUIdio
%'Ri'%nE77)1kfV^%G_(p_+\rT`ucdg!WU-1/Od"N%C6'G7+Et94K-RgC:0.D=j%!f=SP0@Fkt*\VZm'_7T:6]GqcKT@%8fQah6N:
%N6I237Ht<E_c?!G:iU+"S#'m/B?O_CD,/n:0V['bB(U5#XMQiYH8'Kb<f('a`\"H[-7p'^d,iP\9b4[OAnJ]^5NVr#:[D58N^:!>
%?(7^";NK&MM-,M/(n>3X\^"YpUq,Lb>F)9"lIhIaeh#:ef"b]fTarVc1mD_nb[NtY^IQNj5r4$Vg7Y%>T]`(t,eTh,hFuC`5mCiQ
%X^=GO-GQN^_047n-bns09b4l4s(%UfJ.<O7T6.>@l.$pW003C3b/2h8!'oY(J&XT=!(cP<J?O_iA'd2Wa8W2YDJ>>D?IQdE8?[6r
%D"1AtF8!LcG;dIP][.M1(n3i!B@D_;3V0%]1`PHW")-jT/(a4AgUh,G6.;*u5k)G;^^'SQ(M6$=i0b7fqi\0TJZ.B%2OWRNM)$ij
%=?&rDMAkVN;b9HIQ(Br[gfu;0s%'=/YjHNd4Q9N.Fh5io'WAd]b+e2B#D3f!Tcf-T3VD9kS!3C8K`CanmZo8F/q-OrJ'WWlms)7_
%h,33uU1Di8?,mn8EOqLBBbJiufs?66Wb8YP%ai2IPK.K%?=T$CLs`+'T@Gbk2>3[E:#OWfTEL-!he\=ikIfIOVkWNaF:[-6bOKo_
%1n"=b9o]0<MG\2NcnjJ+iBVp!Ru2L@h6'Z[cfu8mA,l(0*`W+181L3p=pNc:`m=$,Q3e3Vi">WcRBk;OloCDMk,?tu[JV*`WifOa
%O6hhSm[cA.Fu;Xj04`SVA_R[!)r%kC#/f4M1h1c/Q8t"F*o!gH<XE<'0FY23e2g=Ml+56iV&22.)u[Gs1^,f$@YI@rC#cT0J9J&`
%l.#\ON8(8,1aSf;[8kEHX`PWf6NeWI4OBZOVclf(;0P(Q8ZgKV27ptRN`VGB[G5(8fBY=Na%iPu[\HD(+jP5*=h/GD\q!a9>^36M
%SS:)9[ghQPHX9Z%Smi:MYhh,W0s4Y_fJm9fK%'MRFA=$%=:Caq[bGfV5MXJ^qbK/W;lt25o9rbHre_7"FO#69>=CFI7Zo8RZ=5f,
%_d9eU":5?)88!rgi1cfr5;Qb53cI/^j*n</n\D9XH?JJAc]TOaP04Kb]^%I`!=6Y^7S:#*OZI?fA=VXd*i"'0Ir,<qms<6"a#eHK
%4g-(R-W/L>SFfu:(ql-,XddPn&%CA0f0[0F92"Ts(\)e$F)V:<AbUuG%Hpm8>_L0!"+%A0S*>%Lc0NFPp3GJ6PBc)5c^c[b%#/u\
%Hc6JC4kP.:D9L1]iuo.IXlU=r(b"Cj_6PdYX(:<q]^+?ZWTSQC>.nq183?TiJ?3_s9rHC@AUl7*B0a@#o]Q?<pSf[?St1BM&Ehl=
%eSn*^E6XGO67j!epVYej?$1l1^[k5[AdTgOaHLZX@uoSs&M(g])n)]I5U`*&_ZXYBOZ&$oU.t3bq?)HS]`<HEd&d[#8#^a@(+9g>
%JG]L1k7SOSdY<9>V:i#_eH$)D=aSig`kRSV1fH3'96],c[>+891oe9O-cPr%G'2Rs_F^gt:>o@[A2*m:Gh5't&ot<Rf?746ek`>H
%9eLWsLU"WJ@dmoh,*<Z,Y]"(=::(Dg31XVtFjSLfZrRF;A;+A1E1LiV[@ogH"1cf27FuA_ZdD^.&RcfaU0]toV0"<$c.7\n_KPo>
%NEmeIo>RGN!Lf^N3WG?n[Qu>'b*V/hN<.%nT*8[d2/$R#)0nIRcU_sGXa-Ka+[>^RLnWX5bGs<r>rJ2R;DbW(k!dO9dkl/-kI#3`
%BoV1eC`Olt5KY$$F0bo.m@qc]$6<qdO4<['-D;&7Vh0U7NSE!"Z]."Y*-ndM"fT2:B)B?*>p%^Xl5=//6n3X'6mD-E4I;;^+GZ_A
%\sM*N1l[+C!N$9B7Yf7*hSqJO0nql_9$=:5)Bjp2;5MYX.07eo$P$_b4:K7CQJ$=_o"7FN]G`M@l`tu1Kr>LZOcc(KRrr[_IjEcI
%1SLLREQY<$5XgF05sq=f+tK;uI=kdICYb,)9'spOknr$N"Zj$A\7gn<=(sTtj4^l:b+u<@Tj)[-Zo]LW7Q.P#dVaE]C.C79VB'S?
%@]d6tEoS(I;qZ2@`f^Da6bBK_mH[MVegXcmZVJnMT(O48?So@IW]*DbMFO`A7C+^H=_#'=mlV;-D%IY.!8T&8)9=7tCr<r.cm^#I
%j#brc)L?\(HNH:XV=K8dNTq41NT"943l@giLu;YE$4T'u:=X3nUSrmKgb/HW%2_.CFC9TTB'(47oM7!,nEQ!!j$L)qG1+WqOt)<c
%mCoGb)YsYd5Ys>JTnl0.pPC%67<JKbV.?K3WCQ^5Cj!aVene>U.7@oJm>^V`TLHn^k37lV:f,3n-5(`cnXeIbFsi""U1P4T7V*9H
%M+2s((NS-cR8I1dd:eQkK%)=eW[r=RGOq69SH<F^kGr?`%J,MCTKd"+FJ)9(QQ<q/b5a+j$.g)j(m2fN+`sR[CS],j[;:#i6>JEp
%#.1Bi6Z:10U8':;ks6LOc5af4]+fuBepa8UNHO.E\.EIT![F$1Ui[^p8`t\4Au&t_\Cc.Q`./=(`'BZa<^)C.]M[enRrtlL/I2Lu
%UXg17[D<Qb4)U8-#`NYY::nsqm0$n1+THa$CkCOQ-M;iZHk1T^RF"XQ+ZGie&h$[o:qjq6@?j=Z"Nd#cfha-\L08Ih[cR?bF4c:p
%/7A1Mi+J+2A(dWk[YK<0mNe*o</*7lNQd?On"M]a;7uTl,eEQg6s$JW@5<1q-B5ZZFE.Iu@I%po&q-XQQY8LQ@.AD--mfk/,amP"
%P%O9X7[0]1Wr:t(7rJ4@XX#cD)90kq9YXZqpSNQ(.HAXG+XID.qdK+tJNq$dH,]Pdib']0)lMX15ONf'O2<%_jR;.1#3cJbiDHk%
%(@8t1A)MM=FBicg@T0/dNq<p%Q4k>3Etp&HG&_J6T[>n8-6#fAC3m9A+#)?D$rArt2O]o3G-_[%k%@$qg%DQ9Laej9@?l@k7[_J.
%Y]+)eFMBlF%F!Z7EtD%([-b5(j''k6BKIA%3pmI2-?ju0[2"MJ7bYDGD$eeiXaC&Ek5Gd2h<>[D;oWO`)/sCIIaFVdD2'Ulao&el
%)ju`X!u]^)A<?,CKL=qo2m.MIl/7ofn/@6!mXAb(Y<15gr4=2&([LitZ^5A,_e#9rN%;E*VBJ"6FMO'i)WGrYM;_Mk0Q>Z1"7XWY
%S(LTWc.'i63>p-T^\`_3YHUL3Q"&@LK*UUJ_L%7dj[c/l`5qq&^dm;_AXXF_KPI&OYAoPWgp0;C3T(8.\^IXg`jp/q,s34^VFQ"Z
%!``&p.97E^a8u-eWMblFS]('C:Icae6DXjgh;7@#;pb0D?)u.)*gApO8HF_fgPHt?3kT5Y;Dg+BNBhC783M+D3sU$Z2&k@]A>(.4
%0_h$/nAU!C=Fn7a2$.5RNo"Io#<H+QL&O9$asPOJ!&ZrbYbtR9qK]uXGla2NTi-]P,8/[a9Q8dIlj2?8R58+IdoaTA:qDce/Pn>+
%k8#j;"!aO:_pY,M$&fD9dEcG%=u$P^A_TG'q+J$FA!I'C2CG&T:];PmdHGS'5mCdtjdh39l0"kT]p8?UoRU-ifks;h["k,j\b"t)
%9O5jJ%Mh??LpFRVdZ4ta"Q'U]rFINg3uWghnh<&V2H]jPF`^N!`SZJ/p8VMiCDXB4i4YPWUpj<C9)/W@Jc8W(32Zk7e]20G.^sH>
%.])X;F-Uq?h!(,q?Z*LI>==>Wj(Lgo'%)JKRYC-M_GfY8^\(p.!cD"9dA5^>_%fC+pjZ!%c"L$J'M@$+S#o,.>iKOTWJ`S!OA,Z`
%.b\bW$`2E*#p/@NGU'O#c%MB5KE5^pac^d;3Vmt'hK`4XRBHc[DsjF*[q?RI#^i[pZ,;1mm-rECjit8=O#NSQ/,S%q_q"[.HaeI3
%IbD6??b3_Pppa.AZCQdKp%'4'@"%qFmaD::fm<JCj+H`BY@<f@e,sK;l1tKNknLlI03=BngDaM*:UW2`>+P'+$Zuo5g"n.7CBq!8
%]D9Y5YKGUh\pI>RD*>!8Ze<BcI:JPCmpSJf=B\fc5O<QOh`g5r&$%4kHF)DKm@A@&QCm^Q]i%^Wpbr/sHi+Y6.:+G"k6$'XB\F9b
%Ro^[rj\?3:2oA.NgT>t^hRkIhhHoY]lc[84KjJJ5[sA(m&A:\C6&^^<TAQ)_DqfWJIZ_D1(9Yjl/4Pc*O,=ZQrk?)Am."<-&PTc7
%pi?2,$(i8e0CDj7mc@NPD\$n:Wt-+X'(;?*%u.@(/M:+J.`SO._NfSYZ'ehC*\HP^Y'aO3/j+Sg._*/>:Z(M'\D!l\S88%%>Mcn=
%?\tJEZK@PAg;C,[[4hF-]XRCsnS3FH;_M39H1W*h=PDWa^X?L,^@C@WG-4\f>[Q>KfN9rqT=/L3\^n=<Ep_!j>J=EV@@*8=Ich/:
%c@"uID`+B&?7W*;YfQ0=CN4L9c$SSM?/Y4d]Wb\ogO/L6B>ldumZ$5_8,hGG=_N7ehL&9#\?;Dfpe:WMD(GZZ:\g1Z\1A`t>Q1XR
%UjAKE?K/"LK>+=N(&%I>6#k0&HrR\dr1T+fE;\]'og2A\)!1\pSkabd5:paKT/PTp]FaH<.m%*,DsD[l%lj?TZMa@ZcAGeQG.H^Y
%oQG"kU\aB>(L#(&`mEUOh?\je<r)]5$D4(BYf3_SCuspb1[a@_B1-Y,%\N"`"92EDSJJsl(GF?GI,Aq6`t.e>r:R,8kJad*\^RTO
%2g=nuEf`@_2.V9.q>'skpeg_%cF^:+H6JOVo>\<5bB;=(j^m2mK11.E/7+k5</IEtYHtV6oYJOOYtEY)%'t#pQJ^crGPe6(G5LR4
%^4,SF)6K'5eCkmCnB&gn^1i'g;DX?E9_s9=@WAY'(hR9'X1)1\H7Z8d)sd!s?)8l/HHOR'gDd'Hqmk2SDQf\$M:Ih]+0>IRp-")"
%U/(TWXlY_Al5eVsC%5&9WGoh;5O=mjRnnoZ]=jrK7p?qk9E[dNEg1chBD[X4DKGJd#t=PV[^c(VFF5Y_<n08,?@S)!r/s8m'e]23
%KtTILQ3u1=Hd\\lemUN+nZB8tkIb$UqN-2UqHtg.#oEm/i>rbYY8:F\ld[=3)bmkFJ(s=^DmEXP5-8pN>PHH\H[.u.R@q[A?Di'G
%W-)jF<9NPe,B`7ehX_#V%<qbJ*G#"k$(:-fH#*GtIPC'K-dZQGI(N4(ZJ.OCeoN3GpPWgpXi6Iei8X9JSi])K?>dM<h/c1MeuO!K
%biZ4:o-pJ+CM0L>;Ct&klgJ6?HhL4rqYR$q";2Ep&Sh0ia2_c<Q!9;ja'S(gh!UI!*)tm,h)rDtP0L[bJ'rjU,`Nj%386VS*uu->
%hbRD!KKONZ]Z<88&i0j7V:+&F]dlDP'QCqnd5&u\hZbW^%Ba3,8,E#p0WVh1SX%[H((g&e>7g=K&!ro+EK.]WSZHWd$FSTg.O''I
%S"(7$]Qh.og>"EKkZbpdnju3U5<[Y*aF!eV(>%k^,cIU5XS,'>IWN58*^)_IB'3N-kHmbR*q#t"&&/h2DP=_&T:Q+^ZRs-Z?[p'r
%((8GTfM`V6rZfgT@/+@U2.V8e8Up;pZMFpCh4gNs,8:]T(L?,\=%fEq>!,j35.#L;aX1b9ClaZe3*%))]o4ub_r-(85.8An57N+I
%5tu;Z7l2T^"C_HRjht[@;h6`"$OLp4YRTkL)M\)Z;@+^6BN4ga+<#EK&go++BEQ!q7%Qis'TI*UJrku8NE788:5G_)0UjgUd0`&X
%\\>$Z,I%k89O]`pO-![FkCa,'.Sc*X_CPJH\dF5LN@"\D`#&(1+N>A2/7R'".E"l<)ZAoAg-G@&_&M%:*9%_'99O@ECkgAR9AiDT
%'Mr<j_AX@8%\d`*A7:jeN*?T^6aEf6qfimK:*KHcI@D'2=IVh]-,,3fmF-l:WA,#12aCn3_C6O[C.,;+O%kIE8c>M4[krr(9LDcL
%(-l&XSNe-j%10RA7W6;*ZmIua2T$,?QH.ci98E.2/4#)makpV^5b3DRHp_T1)S+mdb89)U^1\hZ8+-#oMahEMZ"k1gG@C4SaC6]@
%a^aSK>1bBsF\eWGD^\-MQ?V2uHQLhJeVB<K+aFF:0M65<%#o7ZE,*0<02',#ZQYueOlqeA-X?L-1u'iF5*S]#mJ>d*71!suQ7733
%@BAV*@d^>#>j0-CcbA`90_mL`GMG0'SNH*(eT[>&CQ%_$^!a@&cjF6Bj/".d'-ljl4T1j5/EDl5Zgk`3HAj`nVP88Ma&V[qb`0d2
%j.,pZs1#SrIe%VX#<Ci?kIoZ/\$+/6p?2-qiHhtSkdGo3Yfu]Hb!0ITcltP4ZksfbONS5h(>,*j^AdK5-sjROS?18$5(ZG@o=Z9:
%ED=.HEHJQE1fT'8jCfuO<('IaipUoCV;etnB8,%u^:&#Y?ap6jpB^r-4T0#`a42N^DDcI(Hk5tiq]'a4%.3e4[fR*>,YT1?/RGS4
%4VK'Qd[kmk#O_)$iG/1:@BK6FCY`@$32pA\au+-f[M20RW70gM3-n=m!2F9>0[!9.]^PHj1m;?&a.oPah'4p>HL>5"&VUJ[fKbn*
%II4`s!(tf'dath'G&d8iGl^e>NiK%iqE_FE=8/"E-"7^`drp=o^V21(]O'FuX^*EV9@Y%+MA4@18[*m]qm-%]HC0)JV(\I54=KSR
%H=,2+]5@d'Yds=DmA"5nb5;!98)&R=qt`rM&^Ym>OF-Zkj@uV`<"6QtGeWuE0s>re7nWTrGq4cJPK=.(__nSkiTen*p#W*`B4h6p
%IEo\bAmaW&&!k'%5IuZ(G9+"F?h2h6f"L:*0O^WU=6lH02WZ4tr'Q\b_4Yb_kdN^^mm+RNKt*Cr[J]BNo0!rLeD/o*nbt_*Qrj%A
%SKHuhG,sM.D780`p?R&`XTL/lem_EtOmt'f$e/n:Xu\^LC&8XD=;^1Y"+?\_G0X:XI!aoHj/eJE;[r3p`^T@[>OM-ko,^A'pQX+(
%D%3B6Ho9F(a]&N-e%ATM@Mn",Yj#jE`c>uH`E8$E+\,22U@R*7ijnKKN"oi:-7Hm#aO$c[,B'>V1d7k]:Z$YNdbeVnCk1#R=VBbB
%q<Wu0MJMgJn+V^mj6Gq'qTEg/U!5X[pIgKtT1oG(>]"n-er"832RW^N5'GP\gb3#sU`Fr.]>Z@/S\Eo8d.475qVb@0CGC%oV4Kp<
%Bchl\a.8d_-i?:d@1i5W6h,pB^0B@XDnjm^/tS\BDQgf*a^#5O/OFj^*:qNj`A^lToB4W6AC(4Oas)N1h$U7BLQ/%_3\6JU_&np7
%#7+7d02<&G8)p(W]^dLR^1Rt#cBQ?3il,UD'>us_c%B?JfZnp#W>p1V#qsHIAmR)pK6FZkS"6sRDfVc;D3RP;[=A%BMqdW!]9bT?
%?MhBAqdNjHWkWt6CEn*f_EMh=!T0-6JD9YZFm3`&C+VHGqXf+T<r2CDp@i272u3U-X-^0<>F/Ldr6:*0K4RM:mI]B3e^@pU?:oUc
%cHCQLe441mERHLAo3P_5!2d=+^n7bO^>Id\frQ8U^E'Ec1c;C:bpPk_;3UZfp&'/dP7O]_`W#A:<,hYUm^22^]OsC3'QrMaD0u6N
%Pt-`Z/"8_/U>:g2b.E]W4N2s.n`fcAIKk)E.Fbd93nrts"c#>&mrf'l$ZDVjDBf\YNO`2mHn=\cNfWc->IE4pqHk<!"(S(<.P:'Q
%/)/B7Q+F\^ln;lbf^/k"Gk!J3;7q;G=Z=r:f`F-)[3ngQ_B$SO0&.fEhT*m;LC7b9jI86oCEH`"[p7/%3dpYiUic=gd0X3jr+Y?;
%[r-oJQMi)bmI$M-T.Ii5lNbVea5#qDUO+_]H+"O_>P=7a5&Z[>8e1ju1k\Mn5:@7eT>>a,hS\\fWOQt`KP<n1?i)mnF.+oPj%EVV
%R]cg^H"CY&ZjRA`;G4'MQ.+)sK/i8jc*Qa'c)3/K-H^ZEjjATBh#-j*mXAJlJ,f35X\\fR<4Mf(?`]U5lmE_6HLE/5-Tb%*!;UdO
%mGgAW8-*-dHN4Yr#<V3\SQY\nQBpALF`T4mZ`5kIer,mF@^U*W`-+7NDMt1[&$IW2D(JY,oBVYbM/9]r+k5uObN?:nKtZpic_&]&
%m./d%Agun#mSaTQ_)047\08B]ZEX&%pu99TRdf:c=!t&F*Hn\i>0e5H%p&Aj+rGp\283)54jESPQ;QFY]S/OLj;ffQFZpnB@a,Zq
%m+o]M=$i'.=*dC*9A<)5$l6Qs?FolAKgD7+)Ll:u+@4^_ON2""e?ARVECg;+k,J/&f`'T288R8\FP%unmaZCPeYe`E9#[QXPL;cj
%#<h\0^"h30+7r)PII@G*7=H%i"Qmpl#DF/qn+l\>C3F=\0\G[</gcuN6)u$.?e?E)kOcakl^c#?q.J2+/4hLkZgrY_!@2p_rU=5j
%b'A-oicJQMm.#N>"7$c6k1/E(3OB\NZGc]M:cM>Q_S#h;g-NOI;N&iBm\elph9Qijc#lfsgb"jV!t/p0,l`P+3m!0>gBY^aiROgD
%]MJ>qZh.dBKnFTF00l><mEqNeL20lIq"o;`s0[fdS?$n3Q8Ve37r`uBVobgK<P9e4^=]jTPpVfFp#uL+iT3h[>8JKV<;HL9I/UeP
%9lco8T=;OiiYgDg)Wn01l'NEn%ZbWX^"7#6JMGlt]m?d_Ft@!U.=/Z!ojGTWmM-_EDdoHAE)8,N(qf!^ULDj#[E?d?oD.[=G,LDX
%Ibo(YmbQ4@QQJdW46/6?-[GFV*@uD/WWPfa-4+'%Y%V2qc<qff5PYfWptj3@8<Yh-epdP"oVgA^o6N&#Tb%@f;WpkMlAHFVe*N*]
%s7Yhn]=:pjeLg2B/s^H@F\h?djZKG9*n*mYdGDQEk^D5m*T5P8#<B9-LYI8S7IFC%]m=]'2R?:oZ?"gjFd9Y$]:0,3#d=?=V/j0H
%o#l<^o_",G7o%OM^%i0o6Z'AZaVphj$VDruf,qh0]NZpn4DI%;h&"nLd[?G-M[rb`Z>p7%dWo<)Ip"tO*MqlYg1X+g%@dRWam"j.
%2f89^`ELR@m<#TC!?Ad9kM:;ol.u<tMuCuZMsf_oqpD-pLu><DB)A;+RcMp9?U$c&PkO;8>8s<?kKce6h9W-umDnX/Hq06]]_KVr
%L`;Ai>&UTN=YSdVmd:>Go[D+]C$oj.dWe_aBX1Hk"o9`+gd5TJbHaLYJ^k:@Q!(Wn\G<h&45+SS+*;hRGW(]Un'!sJ<XR,pnO[T"
%@W#pBm`pTG]q$jR8PMrFp.n:oX.5]fR_=bbP?lUEJnRXrbgWcAf1O"gNj^lRJK+0)[9.2)%`"g10'08q2HP=9-.1g#.(b]"Bf.@E
%&Xq,9o[WoQYuJS$S"8hjnPW8UIY6)S5,E\u^!7WWb?t(omn;8Q@#\^B5Mds[XF/=NKAW^%.&BT/!c._5L.$CbrQ0NYr1/0C@e]Nj
%mea?A=&PEZ(_*0f\3PLTE=::lC?Yb;^O#kf*27)=Y[;e(e"":>WqpJ8Md3[3?QW;"5\+6*PSVmq7+\W&=,QnL/ef0.dC@0jS*q.R
%Z4NjdZFQRj4D]tH<dODsZ;J8JIU8m>e%io2YPIc*AsH/9HeHu:gku\9<l>&A;Xeq/d_#Ou3de*$g=j^K7d4aNc$C"lYbT[<B#9eQ
%48N-j]IH(a4`i24l*,dUhp"$nGLj!/jKSEipAR?olT7uJlhetsK89Z8@/C]6`Wr?\]*kIuoe:98#jUfpCiOt#JKYQkFW^$Nc<%#F
%QLIq'k(E!o+5uLWTd.#abE794[l;%&p2[&7o*chl.KnaHX%ogcF%apI6nd8'DI\%RoBX'BfK3Z`c^18(bR9qcgM9)nTK8+5+GdF"
%^cCPRmZ\d[Q<R4c;tf&mq[M`c[7bt[qYl,YF)NqNG1ENP&+.QLD4'[2]](Hf$FP4&+/@UB5H0#`.M#T"AFb_,KdR9qLAH<(#%!qj
%@_-]5C&dYdJ&3G%.N\$%*7A8X:8UQ`@E-Xj,qJR^)WCWVVJ/]4A&Z'Cas@k!UH,%U&?c^\MK[*OTQ1hNC.Y\c0l[G"b@uWr3Ma02
%X07Jef!tE7h/&q@$P,?'VdK0:f,8u&6pCAq*Aos!I^fVGY?PdfDQ`F.D?&hJCJK_Q;&8Y<'u]6!debRpr[Zi[@fB;(q#C+eNbRO'
%Q&L:0o(de7DikrNe>5jL6%jda%(asboj/49,?g^*COrI*#0gM1`uoAnBDAJ<4_"*P-dEme)Y%'5l?BE#6=IH*\5'4f_1.h!!+cI%
%Ip)Ds=BYJ0I(gGT>8"1(eCN6&r*?4?)1+.ViFUs/P:NQmY-1'6)HG+#9<?_%eR%9kj41/d:;Y<8,Mn7\?f82OolVioqm!md1trJK
%/Uk[%LRn^Y4a*j5?>"[lnQSXF1ah!A+*d,)aA18?X`K)Y.?TN%-(&XjTIS?6Y>N2q2I?%r4LX)eMqqV5cEnP<=\J%hA6XH6j_(^e
%]82Il@[uNG[r>/mF)J`Og<D>"+s!*`[3MU:e2p%3NiSbWoM?=fWqab;"#Zj*.Zp\G.EHtgaDRdl=_cL>U]1\OprAGd#s?]oW`7Gl
%<oo(-=k1$N2-%puWA8'u2-#p8jVUs00GD]!W78^mW78]giS;"u=4_CB<OFCE?crMaE7t<-GLXDDk_beY3OJGjC?!E`[X`D&%2f9d
%2GZS;+L:Xg$=^)L28a%R-lrEj+c[<CJJqUK$tEIA<E']!pg,"8!Ini?h2jl:S2OiZBbJo_W1&FF\HG?_V/e0tdZ8F&.-b$eXC^(>
%70M+774!7_[YjMnAegjms"Q`$+K?S+)C/eG2CoiL`i<X<=^WcqWG*2Pb>:#%#ZEUfXM?WB)8MFCc3]piL*Zq$R'(;d/GihH"Olb>
%XtVXFG-.6:`Icc2'*o_GfN\M,F9W_L2)kk2"P"5MCRMU_N?EeJaUNcHEN"qd1e</q!6U-el%PXfD^dGR=XFG$^%k1un_]an]01n6
%<D:l>YH"!9N<%Hc:1Mql[P.nEJ1ZVc=B7pART^K&Le//FL':hY)D][FZ`:1m;GR;O_&CdIKgCn6U8u,7[\_aKfkHt/ck3#XSSBi!
%Q)g3-Z=\Z*cqQ#S6d5f^ePoajBU`.:0NINN5kKS9CmG08,Gt;55Q>A/(7-fFhP*uJMU"JG8ASpVl5!*?ac]uee8ULu]kOKLh'*0T
%nY&^q,Se4)0iUugX2$)cc"<8<0fhMhW$2oiM?TVONPUZ@H-7<qNMmls(27/j=f)bI_)SA+/7:NA1''6`L*Y9T*0^\[1aJ@s+;IQP
%ZR&G%->o#&$"2,P$$o$?$jgV,F-MD*%FC0?i+;gRZN+W(6m*<X<P8*AF2>O\4e'r;P$Bn/G%rAGAY>!f(i<Xn$EgW:19qnWQAq*O
%+Ot<Ta9B5Nib+*Q^rEf,&.HX6MupRE:+dKEL8AU(HJ'8[F_)0s+J9fUBnS['I<)%">ImQZ(m*@65k"k;`Y:7?6o:d7G./)`;q7sY
%gM/t'_#2/BUk8FD#)H+ck%fMgLf4b/KXF?K9ng#L7L:5s6pIK8b-JIQ)f_>*ZiMsG:,JgK#I,,f&]Dm1S+WO-d;=Q6AD@5$@O+OA
%UB[udUuJ&H<?jdZ75_H*Lk6OVEDibO#@4>V8>TM*G*\srGT]Q//=CMI\)=p_$"C`hD;`\BYlMpg>@p@EOeZ_[-<;5:JP?(-l`qH(
%3Mo6B9=PWdE1n,Z,/,.0KJ&Ld)54sDP/@G%SXoh4NRXc],5,E+/c7XJ#I2l@3^Q="hggRg&1DW`oR_T93m<=`[h)LN1Y6Fq!Ki]`
%$S@bi5nO5PQnF@Q!,9P]-W:X-3"Cg`phlYA^aVYa_5(%'f-I;pUJ`;d%!G>+5^W]cjQckXF.58oiJXF15SBJuK?=71OVf;WK\%DO
%g8#5_#eUXP)H]]Ypaq:NQpK90_5M%#OcBX+$$Ja[Wqq`+BPa%I1uri<OG[bA\?*P7n3N=j=F5U-'i.EAJd[:(*9Vmlm>X^,"@#<N
%QkmpcfcQpgU9+_3\'B+&MV+:#^(N$,7?DAL567?2!ujuXL2dk1,,"ph3,A091cA;eHib6h(2RlekWGf:r_</(;;>'Z,s^7?8RO&$
%<0`%:#D4/<M0540L,OStBT<)#G[N6CqY5jjBGN3r]-$?25[2`fl6t)8d:)lAaQ#,/(qLVhjC;-<`/n02DG&8r$lXB!j]E%GTi)Cf
%W`0AnO^]]X1r27_geNeG6)EG7*X5!lA,9GFUghb:+JoK@Y-&(B*?h<FBVZ(^4tR'jUCd)P(ci3_D%pH_LSZ?qN.X9D!e4lRi`%WT
%T[:f\E>@k"j!''Ufi$5D&"sQ7Ai5>>&O@07EAPu)eWGhVNj;pAr+I@/g;"aV1^&+A[[&d-Pn/R8&$W9C5ZRG%<&'W:K0h@:n?@$]
%5,#]YO"_$q)S4F^GZs>-`OghS!O]\$-Wi5@j+'+\+Z+ocL?t9t)$5fV8P($l`Y53U+*[k5`69_eJ*Bu@*Fp(c@2gI>^nI2M1`@[:
%aDW;s)5R!9n8V9e!^:!J;>08VB^,X+p(LA1#1t7i_^l17)FW\A5fPKSH%mH/3EK>60Y&Z!3<S(@MHf?U5pj'_C#$RuanSFWFR1mE
%FE$/\$_n^GGTUuT?qhe@U!0"ITYLe:AHiL#@>6d%BsOroL8L+%@%_3g1^OFo$1J0j)1^'Q2ZWt7P@@"f1;m/.cBE/`6?1+A$ik--
%qR'a/N^oFj(bh60E[&?i!!YoB$5l].lWZk-#@c.%0Tr]VEcV[ITP+Vi.AlXFL)DaA@\A?lY*1NY.C(X`A&7GO?q1\]"R"8RG_jR!
%$)55b&S,<DXWr\4$&7-+%RK*B.PrLX6bsWH+D;qK"JIIZS9T=hZm.nFkF%^N@=]aM1_D*n6lU2K@(6cDELR8rTl=KiRQ>[4\gjAs
%!65++YdUt?JHr(ba?ZI5867?n-S.!MGQQJq<t$GF<"VoZ_Km_+p$qC<H21g3Fq]QC;_p.J7jnLpROk*#!A(K-9<fA1Rq(H<+tL.>
%HiR)TZ48"Sd+V*t5%#kL-LB/[-"5s`8<Ko,=k^EDb:!ZYAgo_0O<j04i_eWG*Z'"h8Kl[HnupHNW(`ND!E6N\@5f;3eM(Nk$+kb&
%Bu?6jh*@=^k"HD2".`o?1u_C5QshI0Q%[u?0t3"-MGW"="E=s19=pnU*2lA!g0rZb^mO,DV1$/'7nC6Xq\ZaZQZdqE:e\U1,7$9K
%Pb`^ESf4J5\0UGIdSrT"Fp.&u`oGLMgDEp@>$Td(gH[m/\?ld6Gpr'4rPD!jY0Oh$OuDk$q-9cEWuj91D[Z@^jM.?EFO9'Z`F\kI
%$`IVm6P=J]dk.FC.h*N:3=<B0V#fomJJn`DOY[$`O2725],UeP9eC.:_SFj[Rbj-<.m"%EAP?X62OFNfh2k%^@'K"7:.gC22fT)H
%Pgp'q$RXcQ>5CJ7.IF=]RVBQ:DJOU@`8*>+H4\mS&0Z\Wdf;s=OKKb6*.r8AP+n/98j*T;8j1PDR,$1CNDclDCf5)nV?N[$0eHQS
%NrPe98/l3r2d'6bgh]\Yeq_6mCSFp`@i(cg@&VSm/bthBqHN%U"7%@?UddB>L5PI'")'\!"oV'-@l`,X@&VS-[#&R5W_!lDYf"?B
%.A3DtV"bO,'\0'dCs7*5Fr*-Yn1>uSEQ^V(KQmrRJ!'`hS7O:4Cp%9Z*?&HJj_^-T_+P!8delX1_6(6Z6ol)M*?-#MW$)6NJl,Fu
%)_(n.m:nUq@GkB[q1<:b<D8H>GQIo:7G8'<qQ+Nh>[E,+0[Cjf/Hq?b.$Z,kMSVtq&t2H9S2o^?FkkW/)M7"ITM:6R"'Pbo;*0Kl
%('`(H#6%o^A0(I9.!8'(Qj!W`_S=JIH:;R(9P0^NI:*]4<.-Oc$liN2]N!\OO$JLW:kI.sA-g/q`A01$)g5ke3od.F_f6%dBCe2E
%@oWTU*Yk)p:)#]ML.QCj\lQ0%.mFR*M]:4t0T_,WAd\YL`PNW>N*X7ZRmM1(IaO7-Uc:&2BUKJI_YL9&c2>h<&--5q9sEl\hEr-!
%S#ohfY5j=3jVb%5E.Ga7Z80fA!_=ImgAjj3!eM-r_rU%5?nlfA<21$NJ3OM.07s$60#sV.?I9<-merA#d"7]9DW"ui=!fB:*Xq]2
%A=?tt#Hk,_08.l[DDmhNQTu0hAS=J7)+p8h6Nko$jrtC=R^Y[i'E)DlD2Fo4qMgeUKgWq3Lq#2s,-D%Xd$'1iLbO@6Kt`!+hG$-k
%F@]@<FCWP?+f[tVM/t`]4V65fD0=Y%VlfHE0-ZM%nIeg\GmPsF1)_@tgLr4fb"2,i<lSMoPtstJLke5]M8c24A3dLW1,N/P#o]Ha
%%1s.[!"Hoi(kc4I[Lg'&2F;%XVQHOX*'e'>;7@H;O(l$bGQa1C.mkQ8b#!Y61djm)BJ)&W_eI;i`N;(2b0+2>b!]\br@JU>!_RPD
%JK\W&pEBNae.YeMZN5BC-cen,f1[S+"+q&@`O[o][A1_GO$GI'-)a44#qE0>L'S)!bs`hW1iJ5R*4HW8[1%0iDE6F.Uou%/6s1BG
%O]I'g\hY0Je>W=&*26+L5fN+r1o7cY+*815=Aa,A_>rV)3Fh!uEoAQI:kY;A\G[1E/LFku=@q%0hQ1NQFH`GcQtD1?Z=]5lP%KiL
%6F2=iKSh(E8^*c\Z]<^;E(Z+Wm-#:(RS8c3O8tG,Q(X:'NM)Cs%>Tc+BcdM,H`F%&*7tQ05d+D"A*+RF_Q^A`\I0520L7M5N4B(S
%c)Ci2bc(^[lktfpEc<iKfpYC:QE@-\UK8\p=;0[/<S&GrO9(M%Q(X9tNM)t&NJ7_@Bg2cLm@maN78%A3$Q[lqEWN(oZ>>\E5rZZ@
%fo$CcX-O#>BpK#Q'MHr(W*$oNaEf/$ED3QDD/hnGJ=gbuoL]7Joh#@Poh#LLoL_)2aBJPl)m!*pMR4NJo#"%TA!L_k<\>8M]Q?N7
%$@npZ%TM`fbCPlnU)`o%j*l7ROEF,#P;Gi:o=a:jCY?&^o?3u`b#Xa!:MmYETjW[i7H,Qp,WdJA,srS:6\^MR#e@75Ee,848!oc;
%4^qh,a\M+5XJ\D@0)Oa<$T1)E80UmS09;d3?QML]^H<J[o#nq]`&(%Fmt<$m.6ABq,eC.u2+[e(CQ\Z9f-EOZeg15+OXB=fU$qqg
%*L*9Gp_?^@L2NAuiYi_]lZULQ`&rTB0lsk3&P,qL&ld:+'%D.*_BC,t0:[sE\^A'$cIH>H0P)p9gqX@(>N/lo+E=OePrL^SL?M&n
%KLG%%@A'L&A4K3\PRR5[RW'l=6U_p"J6:<>RBglWJRlccTG$9W:r0[##U/(p1Pr*rE7V=p`n`pZ?3T-O;f!Zc-Y7h(W?nL=W?Z)4
%>W>'GW;Gf1YGd(pIXUm2kQT,ZmbG[*+09gAfmsZD$'-'a(N:HqV[?)7c=#4iWdAa?6WG#0$lBBVb?Rn9JQj:<J-KU.7G<]53PugZ
%DGO,D]V3,S=Cl,qZ%5-$3>>*4MEMj`F%hd5U.83BEK:;4'ieN)[Ycen:;!Hd"&.Dfp[W$'gr.6$UW$UL>D!e4\F5;h9<>bCdb=fT
%<^rTJ>[0.j6BWd4g9$cIa<W.]IUTD35Z`r%>^2JJ%\^.4Z(]iQ5c_o2bsS.%%oQ_:Kntb4(;SP1#S5ZhD43=)UeqH5$!NtH7N(/V
%.%=_<6_l)3f!NQsWYPjAo/B]X;5f'Z2&Odn#0o.CN[p>YV=J@?5['H]&]?[Sa&I`TD-N7>#ED^GVr.pI$s?EY0Q+d&'\r#p9t_*;
%&Xb(Pd:B1'XI*j&(_K$TNmUFZ?jpkiE,R3a(Yn%./94(08HYjj92RM`TS@/t7AVCTTE4GPUXMLe*NL,rFLin]DYju75NT8O,CsME
%%:nAG9F9tjW(oc<+V[5"c-9p\!UC=4I3XYjPoMhPp%OSb9@oQ&M,%g\`UgIH)R?[fF[l7"nC&r/o%/Bn.d`@</Oh,3\H$5B85PG.
%B"6nq,.rIS^Gn7$@W`+59i*B0#16TS?^Q)D,)"t8_K'TgiXO82=P@NCo&?*?RS+6J1`$X:6>+N*(RJp1C:P[bL3\9&p'a8+<()OR
%g6P-O.Z^6T+49*-.0s3V'8rngofYr!/fr3_'MDb;%G-3ERp^75f-@;c_`AeGAXV=q&6-QNmC.eI/liYqNm6(X#>l4J@_IE=6aT.]
%,$fm=9uMVE2IHPV/-QK:5/o#--L2df%D73=@"_L;(#edX&7?i9LkZ>aN>N9B(XrHAVkWVkMH`9'Fs2GlY`UQt/86jZNKQk61mg'G
%><lWN&n[M60r^s%,XFl[I^mPfOOu$?e1Egg&b/doR(*,a1r*BPDFdT"5ZOu0:]rLbS'i,UetY!tNaVOWK`m;%%#h53pg[Ni/2"`g
%TH,MQ$:K!@94MTlP@sr38CcP-:>#q!4mnqMje[uK,]kLAbraPaEIJJS#u)X2UW-m?>7JoBLb&QI>LhZ@^fEL_6$Q?:HnK@D<=.q6
%'S]X')/AHHY=3`9?k=Fc9T]$ARLRUj98?E^=dog->H,(32cIOk-1oZ:#l%>KJf1is'HJHT"$gP@6)DI:RRJ?ONlQeqUk+AJ.?d>"
%:XC!gM^C_%7#(qu+U5$gmooumLnGfJjPlm=7V@'r!q6WC=!prNR;`O"_db5u5YdaQDDYIm*`AQX:4qeDi+QtLg1^OoMG#(f-J0$U
%((!VUMG&js7&RQu:^#H4g#$0K'6aYJc!k`;b+"&h0P@I#".cMdQsoZB^H!dk'8qN7BD>HH^Hqlh.q96KM<&^XWe^d)f"t'V:I$ef
%QJ3VJD)s<hY&+,Igsdlo)`f@E7eGUT$\RKXok6A5[AJSg&_EKd+BYW]/Z1;pBJp#a$<gZ`:cH=!/?K0p#2tgc&uafVo-q*p5s8ZV
%)<\"&7?AZtiF!5p/Z9I$T+0=+g;9'IVp-BJ0MJ`NF<$/M86;2fnkGYCFp1]<5ZJuZ4qJm]s0X;!=U1&]Y%W#WClHM-)3tJo'X=;8
%KFed^=?n9#_h!JlRcHM0jXP^Z([=plU#J)THP)ZCn![4>B4.NcnKDX[Duc!+YTQlp&;52e(p\l=PT<Tr3e`t&&4HhQXi,a'59Q+h
%V'444-k%]=1_hi<5V4T_)9nI>a"Tm!:nKM^O9eYpMHDg9KGoi$!`:K4At@)u&-S,OY7q^W!ekC02C,4KTXIG"XT=[1#M0AuO9*NJ
%3/qA\SVm-G&0#Il?$OUTV;O)u!&4nWE`S_`4lCRH$`hoobM=h`k3/'*)D4"SMl!3RZU@Pc*4E_!85mQ<'J'Gi'cBs_`K\R^B/Fua
%Xq\g*MT03UL3uZ.<TF'$fZLK;O3^93#>1C@D%&TO%T"J4-n:sA.\qY<AgnKq^hP4`OAS7Hggg\P`Mp9Pk![mk&EH?*$5NRF5YhA;
%dO??(U-MEk@DIHtA]#'#,O8b)WMWP0!7X-?W5;3hi`;4=67o:*M5gcY?j`6O[Lm)=j:Ed[Rc(qG-5BMCF;,p`8VZ)QXi4iaaMu1?
%>pto`c;H5s!0R",Rj&qW-;jLD9-FZh*P>D5T-K0>C%t4Kkq"I/Q6__,UbF>;PGHXDJmLKV'M9\B&fTl!<!#nFQmGBOjrX/^:]eSt
%ZLh-b"cR!qr<4rJaT>D+Ta7A@0cXW;CA8tZ`fu=$$F333YXib0,a',dOq<9j$1)1>[ZM+mUoHDB'8e&c^g/a,OT^;M.%21n8W:_J
%`au(rdQ1dLA11LN_>Ii+7+"iA3+!EF#/bYK/f9F5;T0j]L9,;%r.RI0<Ye7X75q0l3#"rs0Lf,\=X:8j;l.ARZ:GnDVl?$iR5F-W
%P5KA(=^7'o)6bHM<*D<hTa!i>gZfo.VC$KA+aQ"f=Y.*je?=d&9Mp=sB/$E_<5N)uZ:,r&@QjkK;aY#5bhm-)(d&E6b%=b_E=`Ba
%[PO29Yb>uG0jTc3-'`;6/0U8_=8\7f+V[3l#uW_gJo#Gb+drfTMJ0RXAP0\j[VRD_lkH4N9U5g7WYDRj,(h"D(%U_7'nX6-P0G('
%4AN[_QqE$8P^/)''(Ao>&[,"`qq&`P9ARBg##!#`G])Hs)7!N,cA9dtJR%2g2HWKfQV2jdGU8MG"-3iZQs:PCSA[]%8M77pNc*C'
%aX*NLZ>Cr3-%Ifq^O]KrDO_:_Z<1R1SN%]/MC%]Z.Dg<6@VOel%Ao^.9<<22%,$XaaJN?-&k`W(rg#*c'gYlc`<=O$:ed!BV2cHn
%;.Z`n?]d)Bo75<!WV8sQTK>06WeKl:(03"A'>m?UDhUJGK#Ql,/T+D$X(O,mK*n!Kf29B%!?rIk\M;'cGcG%:#lo+!,f4'cF@ln)
%OFc,A]H96GYA&U+Z,iAWg9<q6Jq[>]]K-.,@\LEQ."&>a,V;b$O/C:&\CH9`L_gZe-K\c'A!j&"+AP9EaYO%'^$Rrqe\j/j!\0<.
%1][Vs\X9,Nm0I-O0</-;')VadN-s>>>T=;TMpC*l.VMDuYDWV_'frT56G5WEW%sSgWC#2pBrK*I/I''JNoJbH)6/NK68&hf\iAJ2
%L^)8jTSo+uAeT\EZ'bhn:XgtRdn:jKbU+?9$3u\ZrbMZ5l9kN<HZ?!FU,5D+L]MT;[HrD7RSF6oG@R!p+*()LgZZ69pVGCC+@gZ<
%P!62E]C6$ZF*c>"3Q(B2JA,j.l]-1q.mU@?fsYg@%k.:#T\ECM"aYgHeaOppGKWlh$@5W+rRS*D$rstuFIcoCKAM:Z2ng1%VV%n-
%?NTp_La^#"_;?0u2mE.b4$nEEVfaLk=!m?&@!H@UDW]A$HrHsJ!Y6i%->jd?$\]9G+N"cBf#<&lPYB#K%?.3A]CJWX$!@h=)+NS6
%#fSrN\ueYgIuYnr<M>5$6-,i=FR*?hS&2s$#%uO1SCHad;I/>HZ=2+RE2&AiJtFF9$$)<Z"Bl@t^c-M;<PLiM_0!I<RCJ1&dX>kD
%9^Efg:]tc!q5g:YJt$ZQ>B$68!@"_^,!pWF>]PQ&/!c'$+1OuO?/U?H*U(/_4W1WS&VA)$`pJ.XL74Kd&_B>Rh3m2Y1G(=4!\JDW
%="liA)/)5Z/53]K80HkY.KaDCNV%d>bf=s$K&BSsPjr2s3m!0?5o&tP\2Xj"bf5I<M03f(D'UBDZuA^hW)dAun>7^97L()AdpgLR
%\U).I'$Fh7>pQ[d!Z/eP!kE<oUoSaTKaag&$nK%cbetH7H"*<]hQCG0eqr?s?8;<:(6,.pH=ETEM/_bg`=tc\@&f3(.4u=cdo1SJ
%VIPam5*ueWe,81XI8SZBMI/(L[LrsZ.!T)IOZ%_6Lf7n4,Qnj=MPre7R"7d(2)D[="t%"&Y7j<U.da]8l\+"5\:#'6`p'c^6.KXJ
%KN_?@(etT-rY9GS&dVsDRTQHg1q;@a$B@[W=_OL]1C[1th&s_ZUsRs%`i2r-&4/OR??BE,Luq&JU;GW0K]%QMW2i7@U#=aO,+[Tr
%oO:(uG1a#SdJsK;+J>/2-fRKCYrV\H:T/&gnmDJp=)Ch(((DC=U=g!+H80)`Rl!T"J-#;3>S*UfNFH_&+#>]="J/[!"*(*V"E5So
%Qs1R=,&Yd'PQh^<6Udm`_dWCoL`7n]$j@5%_!58;,-^JN[fO<AJ1#5rTjWUI4r7=*K@-!oNg>:`ISf)L%\a?#%^sa8&r$IXmOVj&
%p#l-0'5=_[Gc[<Iif[JPRn=ep)%V7DEN$(aV*TK_023cK(=Ki?@mPR!.C[5'!A#_6$jVk[dJO26]biRk:DtH#_>kM"N3T%GgFsX-
%2\o>-//ZoDlEct"RN%07hcMQ^3MW'2=a6DG,uG?\S`sZTr*[APd.%4O#pY>h9tVT<:DaHKlcm?g`fdURnHasu6SZ#-D-b_i&kFnr
%rD5-W%?*_4874!Ca[jDqR^ZfYn;NC%8O0kh5[8CO)@His)2isB(P@I^+rV[_(B$(['k78qSSaC$4Z=/*BIp*0#rm<M/EXt3B%n!.
%HD*:LnJ**;bZ\-K+RYQ5;o58f/qfP0).d%-ac9G?A"=pG:>HVP5V-Er`6FWj^'5ZTU6@M7O]7mlTOhOq'V0XIi7Ar+Ydb`;(h:>q
%$ULIH<bU\rM\hjHp+(0No(;H_%94Q?e(:j2S.^_<oW_AM0)^^Q?c>WUg7j\lYMiJ<Z0?%Kres`liUm#F=Lda=m'.AIs/l1VnR>Hl
%23[Yk3/#+OP'uhO&1Zk"kg(!:S$'p+kEtD,*bG1(4;:%Db4N_I12X29$\2<]1P<dWcp,R#IfY-_l$iM!`<>#eBS8u5!=2n3h!A+%
%R4=I2@3r5h9LlS?gK4]WEidG=<@XAf2)ceBJ&[o(mFkE)4DUbXVUQXSXjL_YiNS#eP:;R&?kG?[`QM6-)P>CJmi#/"P=h84D'(m\
%Ll4nb!T6$dVQ&VSMJ?1g/$qZ?73!.!(qo8J2T4?oW>7)P%ZftUVP6Pt('`$[r"j6P"=I/+kk,c\$.WcrkRLT9Vc,n(K+:>/D+!o-
%Xl32?G^[4?dY0rB0cj%i`8b>kPR@0'CO/9jF@)(L6\j\;#0u?83!W(:G.3/7e]9L.1(/0?]*q+>6WHKG^fEL*`:U-UR0VE,%Q?/e
%Ti&1jd\Ai%H\?X[!V>W:;!!<n_oKc1iu@HuV&S1Y?n(J("JCXNO>Z9+\Ie%_;J2P\ObZc7Rq3LTmeUEid60WS.F/1,gf5]rcCZp.
%>oOD_F=*9u2M_))Q,VOU%:t&.2BFCQOKN%M*e@9O!K;u<1C7"m'W$EU&EjECf9e0V&Yp;!-&jWe0h0dYh,IJ$=8RJ][;V`W!CM$L
%XRlY5O9-.cKg*DIP@dE,K@bWhGl9-cE/]\;I"^5J3CXJG4c)-&YB&6:/\s/D>g4f]_(g]45IqJI$l,,UH3P@!BQtLF0c*S.4EVK7
%RP*`t1CkYPi));H]e[d(dA/kLrT.!Ip;N11h'S44SEp5Dq%>M(RbZ7':rQsc><:9:b@:r_Na$.a5H]nu$kOG:2oH]Td8G'ckYcPq
%YUh$%PbD!3OCu@eic_\(IUt@V__-,BS;c1Dr4shP;!E@>#bnm94K</;:h1GkgQ<rUc`og.ScFYf^fHnK_)7Yh]prJ-LEXjV#L,.Y
%#rD.*nXMm5!r=K9VgurQK5W*`1C"N<W$GS=ShZ$SN<IQE=F2+_83?tsK?c,=9[ga!\'$Te\WhmXVq+a#"lir^`3>2ZC>/21,)&m:
%4VLV\C3U_RlJ?A=n;/I_C?RUWoP-<G?N-?>$oDf^*2+f`[#]E?@1AF!JB#W,FE'SR>sP2RO3!3&1rL,,Wf78R\4W%_9N9c!Z,4/W
%J'_>rK/339TS`1X<oC$9E/sI'"+16F+4o7![mrrQj%]ID`2;OL+`n/Sq6>USK)")F5n$m^`PARa36K&P!Q*&&dt708YjS<*n?=U<
%q(OCJWgWXGiF])]Y=HtX"8FI(Oi%&Qe#9t$pu7d.GcZpC(oLgfg`saqRk.eMb<I"u_H%7-2O]Nb^U$PT+"uWLb:=1!i4U`FE4oOd
%hWSsg>JCOQ?Xr48/202#CQ"qtk`i'VAK='6iYc%#cQoH=%_tJoJVUL?&07t-ZD:D%1=V4LnaUb7%UU+VCCIb`mO+B\&$!PqmR'-W
%)T0S8+!RY5S3iJFO[7A7#=,s^<+%,8iKI[M'e?PYY7/XR:f(]_*?TN/L18X)gBq">SIY/n,lraM,J>7k[Db^VJH=V56FS^JPqN4/
%ck&O=>%!)_h%X/@pdN([0tb%*%:2>*lbQF77F3gHrX`$QLHkP!Pr37e^M)8[-<'-#?hp"Z(a2sG;W<M+8b_@$"/"9>8J+8Yecpk!
%)::16X-JJOkRB20HQ<J664g,*4:eO9:b4+NnHmO?3scU[>7i_&5#fQ(78u'?GPLM@O,k61r#0*qJmlP&NM*lap]^uj;+[KP_k84^
%4l(DmMJlk[]BjXtN@lPdim@p!&(,)Xl2jdNSFnZeQjBCQ\E!2cD:kB^$HB3(%%e'LlYr5+A>JWI=c*8+N>mBt,*V=g0PhT"&Tfr3
%hme1kO9_eedD0+$_2IG:^%r:XUiMSu_jaURlkj]h"MRGret6rNN@B`BklNdj6)co8%LY%3G1EIiD[7GA2Y\W&==fXg"$ef%iU_>^
%hnuj'0go8Xi,=0,1T@Z\>[S1r-sj`,9[Z')<6%B+]$qTtbZgqb*u3ph&&[_]oWTLK",;I3QDCQ0OV+NIO9T%\?p)Y:*/)ZjI+K&;
%YttM?%6hMV0h'Y1aGe`%$Sl4k28_Z<KZ+"/4#R*jdhYH=,JrG_RN+J.)+Aisc&*/MfYoVq'SOG8E1G*J\e.FY]bZcs@r;`cTGVB'
%?#:6"/KVT)@hb],GuLYDM7!4\#Y>D$W(@k9#ZPKHT,W[1[5_kP;-/_11:S;10;.VU/-9ZnTa47Ze9&bqS2[l3nQr[a@F<oOP&6&[
%.c0H@EPXWO6EFtLRoE6PI%qahL/E/n3&OHPQH$n5MJ_'7#q(N<)4_]Ud@d3eh)+,Em3dK%1I6NW2+;*)W!g.\<BVg+%Y1f>kl;RN
%3MX-m%,6_l!$Ak#,ZZ646G5>mdfG1PPt;Vi0nCq$,lgqSdgi%U1@l%qQAUH-8<@M>rBN"?o[/j,n7g6F^Ym*6b;:n5,1O!e>C1Zs
%O.q$U)pq)$!8eh3aon>(;g<+5aRlJ^O"CQiA;]0*[OH(QgL.HF-pi%Ve;H\B6:kYie<K)>01Id8Gqng-3Z`'pcb4!3O&&0E+b?HN
%k_FJ(BWrW,+Mi[%d4egeTHjgoTM7LMORVI<\4IFk`D02Gd\V9\K&HO50dcD.fm\oUm=u'9DRF3"$R1.t"mLegEG2R!d2:ho7!"J+
%7%1Qk+Sb@M2e"Op\(^'0&k.GoTP0>fTO&W'UF6T2e"NCgM%B`PVBXimgN;-P'SAj#D()o68tc>>%Je@:ad=6:N7"\0_X5/%RgegF
%Rni_BW"P><\ESGh1_rc]&a<2/Ptq0CCb)*VQ>Aednh22kWCT!`W*+5GT@D\Ifb=Jl]X<!8Z@):T/>IVWe),b0d,$+14Fe'eBQOC"
%GkEo,E<^SYTg_;K6T&@sW+H,CAKWhB#?R62ie(N]0mD.'JCtXRLOh!^Qrb;8<&]DQM!;5%&6K_46V`s_6"#;R"[eBe.(bP!"4<]p
%Gu!lN[@p59s,mo(Q7cp-S;+S?W4)eK$.ae4L,uIF6OR]*FB7TL6$c5LJ$3:rC"SoZ*bN5Go'97;GGke^%YA60&CU`Gpr%2:\h+J+
%N]4K`7/[?:Vup.)\9\_YS'l5[Sjg&_reL'=Gk)%IO"+Is_foa5%@M^bTb2O\TjL8Jf]iB^ZQ)cJkt.]8p,G4a-Z=k`KEM?j>(/#0
%OH@J_<jXj3GgoK^eX)@Un0W%1a?ubSfK*;O*221Q_1K<GbgTRXW-Hd;^^ECN9;27^KIRo<<kJJ(8&e(H%'GK1H'0k[q/go9=Hd7D
%MnK^2OB%![P:2(Xqr$e61!4I:D9r]Z1)qBXe4l>drA.,CR33_;YXG-;/T'bO4ZTGfR,[":Nq[m76=4J:-7HO<8a;WhDMhXu<-i_V
%W>I8_(Z'5G(doabTn+#7_)TL,ObOAJceB5=C!lnir`1hc8CMR[:sh*SLh;d,d'Fq@`:1<\W\;/7i.s?(d9EUd-=K1bP:c:5.59q"
%dYg_rE#>?sI/;21QV<*)W%@Ub^eKuk]u[]5Wf!elWJJ0]\,f$APCg!RQKk>Bh\kDf:ObM01(20uT?h'CVK^jO1=E+gZa0X(>\0CR
%:/]+[n)GP.(0$QmaPt!)-kIR`$W;rm2s+)%_hta\TVV+lHT><Rn1n`>*usu$6)7@f:bb+=(Q[9<38bh.(1f`4A.&K2+Hh;C_q2-.
%3CXs>.WW!(;>l0<5B\"\9N$TPA2H,rS5LL2`gVe]>@8)+7`/<LdJV,r_*Ok;K<R9@,)mLnMWl:?"USdlKSlU*,Y&Ja#*9rY_$ToM
%h)`j'Q=,CZD0^`*DHJ*XKpPaE"bbuTglakn.p=Vu=a]fq6Wl2c6:@QYWV]\Y+V[49(Vq=[SH8R!InM)2#Z6u!j]B@oS2:jc/1FC<
%!l]RD`?n"T6EXeC#u#'!mU6AEaA[=N,ON1":t.4s/bGCeRt^<9Rdi[0nQGK4@5p4<@mnlr5QD*dcQn1*b!>TOC^^$s>a44#\j`E+
%d'G#$h?rQ<X<:jue`1@g-`fl*a>DG!la%h)MG(l]RANprC9dt>)7ij:YE5]-eZ`aj@u1Q*$9Ca*52C]U[pk-+1#._a3t::[&ZX;3
%Ic:21AApM16/8\hK!P>C#kM/qTi1GL;,-KUm$%c#<>mt\C2<U:8@amt7!$2'"D)9P;[HQiTEM!In\^dDDhYtu-t5W?7b@H)Ph!%o
%Lf/@?.BDI7EGCH78QU_=O-$Xo(=a]K(89`RMMSRj:^rdo:tER%@m*-2!CR2ACKo_`,OmHMU>e6keKUF#/CFYpGb:@q7>E^;X#/US
%[R.*V[C"#c=SHW0Z2h'j`I9X=Ve7EuJ[^+r8#-UX-n+6?Y^/eF(u>A8r/@2'qadMf(jV]Tj,:HVr2jZ;\S)&<<9&*E[bT.QTY`7j
%-&T9i^k*.LHA'4scNNQ5W;n050a;+Fr@nU3&9078d3JdT*8hPG<a]lGOorpY><tUh"!_Rh1%6>$5u:!@JIhC#.V%j<#UG3<ClcsD
%".#Yo"<8=d<2Nl'@[XHLK:Z/)Q:WB^b2d,#"_3AU5&$E]3S=G8`A/TmWg'5hU<B^M&RQlJIk&-qf82>ADug%hkmf:IAK$5*d/bqH
%2Wu;4QiW<"$K%VQbEep2dPZDAeP*'0:2b6Cnld2-ZQsi1KNiVIXml$qc<,IrkWp.7XYUPr%3`)ZrTd=C@tBm;pO=[+EQaB2c(sqI
%16\[/((JMPTHddZB].Ve&[bKTBUYBOAX3)uTX90tOAgA>.O.InQS`4cPjje%67*;*\sP7:+Gacr+soU;D'n>3@A*q^Tc>cnma(1J
%?-":aO[4if#pqs:)7jM",RC\LR7SqZTJg:R6<$rZ/]K%=N3ifC++tK)pPo=a=HCUC"cTqTr@,8"U%i$s\9AXG(nes'0(=G%;HU8=
%BG$3i(-Q)Z71UlfT/&qB%Md1:#P@"@]L3G9O(\O;d,4oO1^'TeT<J<iN%-BZ"=o6]"Gg!G@J;N*S6J5)MZ\CGU]CVhrH&E&j//O.
%/iVlPFP=3'88S5cG;J`+U<P^*IC`k^(/dX][SCFpM&7E:HG[p,'IEi4]!KqR.[>S>*C90I<kQFWpr<CHld$FBH]*F<Zp`_[jT07u
%7'd.AQ.U`lW$e78A]el3cl8i'N=^ll7!p("JGO?\@aG*6BoIQB"/m$)aWPU_<K?`UQm5X2->JFK@>]FQh*Dc^Z4V!<Kf:pK&n.4B
%GHo,o3E?ojS7&URBkS-dN)1u;1F+A\3t.;m9&)AE=u.%LO"&d,W0X*$oemp;F[nNb(hZA!#,";!NWHNR-O4nS/r?4$F:q-0#E_:"
%Ca<[JmARW.\UN7g4;ai+`H<Ck1sFEPMNK#"4V=VpEkhBK,Fp6A7[HBg1aQgc:Xi[+FYp6pZtPITd<*$X<gO-:%,CI)jY7s81m\Ib
%bW4r=`2oRbJmp2n77EJq1<!2pc`#N/S73u)d2`E&"B>nWZ&M>MbFiO71=X?6l7P>))HWZ#1e3C3.]5==RE\^4pX2L?'au:;UtJ;c
%@+nJ%&TW<,&OaMmr>Ih4,no\GYO5S?29B_$hLPVnDe;"^d^uk[/f_[B"e8$T60"gs%a[?KHK#e;pX,Z[o!%DkdneUeY8ZSQ,uKmT
%OqL21'Lka[oLqn6-NSchIp#\329q:\aljY'[C4+L]b8ME6=O(aQL2$KdS!J=Xte*:,%:i6<*OE)[QA-Q3WkePoufC[=S,iOlRYXC
%#e/)eS]a$ccBf\2Y6OFj\$gCD=JrgQN'L][&p340(ibDhRd5VL,)4H=Zo+a+]//U6G5<O%4q4LjjAF&R,=QMjXj#EkADHVDVJVf0
%AVML%0K)ONLe8PSGjd6]3Tpq"6l/_hFe([3X@p5l?F,=;QjI$1d?Z]jX?YPUNATK+;1N-t$0nB9KkR!b15%PS"8A[+D4-EsnRJO1
%PZX,nfNsR(ZCOaMA9#k=rc#f(c6I5]OprTb$/MA]k"LbJ^W\F-OZ?H^0HV=Ul;4Ht8dHSD%,<[D><9&OA!V?]-Yf8[`&f+$@>7N3
%a&">`E*FM[i?C;[X`oAQ8j`8cX>q<,oudtc1pVep_P]DZ'*A_%\s%)b8AY\h&oPsnK\q']Q<BD9U^PXT*1gfW=t>F)ojWfRlZ8Y"
%fT[8l;etT/RPh!:Z[R1f)3);Q:)RV^4I;6Sf*O`*KnektCNDPH4)`\BCT+W^D?`bM/$4`tNB$lQJ_Q1*gCo1fquj:@@]11rg70$3
%g+TWdUQJX3(fJY1=c'%29jX5k-Nk#=KPn)t3??nG2iDBUMIg)[@O^H%e()Tnq^V96X^-0co$#R/-]#hhFH=J2dns>abVZ)WR3kG&
%VdgVP=j7mLm=ZUVL<rZ'25c)=o4D-N<>%^TX?=-YE5m`:Gt"kQS=,_`!\/#R1W3msTk`_(F(XTL^MN'NNGRc$AO8#p9LMInUGt>r
%+JOV;9supWK=g_eXYa9;8eMcGdR)]Ts1Hb]6:nI=\O/iBXkutbiiUg/h4qA<gW?j1?>2kRY;F1pT9\#87-qsQo@6SA,&.D>A6X+e
%`85aF<a+2f'\uC!&F5Tq3;7:;3Hr!Kc.+P.+duV%pEHj(FK&BW][Da.?>23-NH[Eg`hnpTE[HU@+`robc0=0S]QqI[cFpSfOY#QE
%s2ci;!*2F\VAXbP9dL+DY4F\S$tIeum,9/Qn<mq:F)UN@J=JRmE/rP@ksQ)PH\SQ2[p(Y(:O@5>#"g&>iI],9cFOL1c/5)G@Yg'S
%%,FleF#LHGB9o'_J65"<rZ(e$2_?Si5Anf4N'&I`4[Z<)%95!]c']@(h6N7aL$mG5+qW1jHam.IZ&<d??kAqK(ojJ<g742jcC')q
%&:Y&=Z`,4dQglQdLl.B?DPU#G*lU)^-]$<0TrLkp3V3-U?[$=j8T^j7L`LW$O*laHB/[XFi_oqHp!c6rZVuK,B=:kb@7D'<lmUV9
%[9<W(9REfdSEEL>6&)7&CloX9VQ2VQP%FSQVdbk2M[V7pP>a1*^gi&?*+Od?)52D>=``_(>WK.AfHIlg`ML?XiT`QY0s+9OY4H7`
%r&s3t"^!?'K@mOd<,F=+c7Cj?QPZ(;aK+ZhXe-CI.f>UNI5"'IN6o8ZZo)-!GKt$dM^RB?ZBHS[n9\J:VGa?`jQ+n[YW?BdX6EqZ
%=S4/BRTJ6!c)[Brc)Ut.bmRV.B`tE0(4q`tJlqU_Wg["Y1X18VbiIE5g_3b%!]I_V9,U.7p+MDn#R@%^Sgm'c63>b0XJn?fl]IQG
%Zk9L'@4XBtED!2SQ?Y`P$j/Grg6@W]`f7TYo(CDa'&diSkCaGN2.h5FhIY7Q`KH$k<>ig\8a%?'\5&RQr^bZr4@nOMQk9RJ7XuE.
%ioWl<'*?^sW0'7R;Y<R=_;3'4$D5$V1B7CE5ee`f?fG(dpiS]:`+2mTU7lR:5Fk)6RjO(KcQ``:2G1*LFr`NA2>;>9GQW*c"iD>T
%Ydh7u>fV8jnEI!*#X0,K*kLG0Bp6W3A#?t125F_FTBN6N)Gn]U>f#ueX:8'[<,P<iQ/Q!<+/bpGP\#HiSW$Js,W(o?*"Xk8!K(<+
%VB`"U$=Q=3oXl$1Yg3I*E;Bps+(S+[,F1o*RW%ceD%A.@QlJ-l7$r(Lk06X&U3>GLa85AKLiXh\qWn>A.$?[0*MUIYkBS80b_\(Z
%jQ[W#Oi+Xb"%)$.7'kl$E**p3gqoeqjq,<Gr.6[r&h9@^bR'T.cEYmH_BW5PI*//QI(Y"5!boWf<9-dfKejW`"`oKQAPq=Z7#;!d
%h_sNtQ/J"=b2l7)3:\Ze[J>Z8<2?re%P`I-gi0oO0\T=-'CUK^qcn;n\"NXN.A6:Fq>;(*BfG&fW=b=QDM.#9AD>ZH^'@M3Y=l5S
%]:IPKh;u?`kUuUlfuZ8PR&oQnIYRW<hb_#AfB2F?s2LFSKfHMOIu"6^2G9pqMeS[+Q/pLigOsh)jBPH3pajH^4nR.alkXPalg>=L
%6?e3@nn7q)'U^cfBA,,ZGDM"=*MPH)GDJ3'C^2Gn>2kQR#McG^cP[7LOQ5ES.=N2I.bfdgdEE6'hMjF+5*5L(4=I&R\PQkVq:jMg
%QfrZ`&:76.WWuPje\H3uDOakt^p#DNS1^iN%lP\Nr8J4EJY$?s9_c=aGP)1L@Y_`qoa%ob2<h5Mp'?UHp'?`hiJc'UL_<n8f;/lf
%22#kQXZ7EWSMtaspWN+s`R'd$j6)_'M)+HMFuc3W&:5S^M0:.KRH>^Q?!oolqan)%J9!aPlT!&bYg<f:%]Rqj19UZiYm+*7.P`j1
%gptq)U66Au:E?.UgT8kapY)mq;=68#'TrPB\9)[Om>"7-Mk^_u9G-]W^dXb91"$=1OT['nd\hl\J)50r?_-$+L50MuK7Gp5Z,HnN
%M1\1M2oNI\MQ&iCW0pJS84;;/Ku=:k/H!uVN*HL'n6*Ro+$6o'#G5Dr-J0Y>L\5'M']=2A@M9)46BWYfCWknrADpAF3(-X!Hk&pX
%59-g`Z?m.7K>]lZl[-"T&=X7!CB]k,jU%Ik)M0G^IQZ@WM5'5*68O$PJ]qDEB[]<3U)Bl%o&NQdomd&r?^el8!fD>j/=Yh,p@?K_
%PESt:WEP]`K30e#k=UE?_8bf-&+dkCLfMe+<074g07.DlGf>6l9L!Qj;-s#K2WFN;10G0tj[D]ie(<$9g$#c:NBX7shHaBZ7>mj/
%[&u&$g78C#h^RSg.S,&R7$n<J^\`sZ7@O]L1K]bf0i!ec^42)>"*<q2%?DGR+_@)+H:+$P39",N;j-3@r0,jeP)<q1A!UR*R.I#S
%`h&@&RCH((VTK&X@=_o9lp@SrU"=Nn?][[@U%3)/'GlZrS47;>T\]([]_PgrE#NM-Lg8Ek%_OXbNVhOn=JAE\rm6Cnc/$G;Z85PR
%GY2FT4K+I*@q<=dY)YB,1UAjWjfqpP3%X%I/ti7'U?/UIb0]+jiA#c!6(p9'W2kKj1WRQ?#pV7s&U*n9S>mh+6X)?WpF;dRRW)/]
%#BJO%P]G'7]A8S<;<cOOda3/YpX-^b9IF2^,SO(P<mf]F\3Ph`btMDd:#p,-bD8NOECjep1^L4AhM3ZrJD`T6cr:VA^Df:TKq;m1
%ANC^aZ'6;m@hJM.*lWbXAF_MjiG%\tlOfrsDl8143DcHBO@TQn3MHrn)%mk9I>]/`Z^B]W9$VIeHFa:</.Mst%!aUcBqMVln`GB9
%/b(/NMVGt3#R/`>adnT8T9,u>,;Rb&SdP/V9V_$#R#,*^VPS#omPND^VbhN)ApQg^VDh%%9b>Q+UGgR?V4$2IcqJAPh+Y$2\X>q^
%&^k^R9XbF;3mp]?KP#NtDPd`9R<GOSoL<Pl2_"J-dDK[s^pLCn8_,XEa),Hn40<*Q/kHPpIDU#P^hOUt:3%n2Ro<]L`p&e"<]<%Y
%mAQi0^<5uuL[&0,P@Oo=.(jAA@Ho-YWP:Je3+;ktRGtnk)<#BH/hkI(%bZ^Z#Ege$K]nLcFt,hATAqIRIZgTSZ0XY7\h=]0`lQ#d
%:_b%\A0*>g6JFmH5p>gO_F45Y2g_9SJVNnNng<WebbLZj^2)X"'=SV?aZ!,h<BnfLLeTtLrS`#S\7e!MO2P8j=JM@!]EIJu?RHa0
%A$.U+nLE,goQc0QL"fC#NCEW:ZeTOs--h\!EgLtZiA/SNT!hs;)2S[^N:'8T;M!%d16OHep0c?U<4c;i"(ZAJ?qj]Z+IOQ8$`KoT
%k+_$&0i-\C0@I_2/_brI[VQUlh6B\QFiu\:^22J<_-cp&,ohl4:qOtWKj(s&'5H@39rMd\-D@krRtQ+VQ6at,:Gni[m+dNebN?LX
%aSW=N[6mrmFn[eff%p3]2rCid,DLADHX8XhK32Tr9QWQ]gW94FjqCmnGbR!Wo\\fA@41=6GqQd;'JY8eW3tr0LK'mp8`=nOk)st\
%EQ=;9]$,653N(4lo.9^)7$Hq!%k*3cB1cJ`f6lF&H4fQl=pN.to)-OMrN4"]2dRta#'Vj8FJ#$MkIH%o4*\WDT=ZASn:roSljr0I
%l\+8S0FANTP>SlfP0C07$/eY3LS6Q2JA'0n(Dl_W7o@/*GD=[?_Ygk7L8`ePMkbZpGk[3=,UqQB.*T\eRK1nF6Up)<oY!cH&?1l<
%L^/=_ma7r8FX'M.aNK/J`a05=]l(b7I[-a`U[U#iBK41`meFkn"pmccds6gWLj7H0CIUQ3f':;T<5pdBo\<EaE$WgbDJ-R4ZRD)(
%p+-("8*8LDp]^(t&]5u%i2Tig'+\)+\==S:s7GD]-&]`fT]C\-(o(n>mh6V?(fA#Vd=1q(pIfO`IEOXrjie.t7oA=?a*PNZM"=TD
%b5;m^(@iVGNJbT6W0/O-*iKJNj$4dS>n,IOfBr#1IIGPsBkaJUbtbLhN?@:A8rOrI9Xga3*=%Fk;\\3ij+iWj@)tldJA,Yq7qeGA
%+!,CkZR%sOlH(JHRh*h09Ilmh\8Dl[P(*S&-Uod85om\0aciN8Brrmi"s+H;\kl"-,;#K4d"p>*n86/3%1K9T<%HQ7D<@k<(>McU
%:l*4ac66#O5:f@(31kdBo&d8&4%]rnBBb4@\2*.8*1O>unebicjpsPF@,=ENRt:[a]aQ@fa&]!aE2<,7C;>3RGGKmB1c^VVP,rmL
%:fYW!/]EddqPSTE[STAoT]XGh4JNgT8:2.@U7JqJKS3%-ZX'AS^d:gpTYo7MkUc)N9+:0i10\X\L`?$mB?3[kZ'I5jp60%VoV:37
%)\+bS49C!9j[%1D<07D7"[H;)OQ4I^igY^AYUqIX"UQNpL-^6HK#kD3o/8X$&QF^7\;TsS3!?2WM?GWSqgkFEaePYnh#7Ohh`:Lf
%j]GNTXLWq7=Xd1^:CjFMr_CMN7Ot'*V&<DM,mRdmKLR5-Q)i$\&PCcq29qB#F:hOH_osH!58=q!(s2A)I11TOM.4mSm\K%b8+kDY
%a>L-51Pmn&;4+f.O-2F?LZS$kP<@g);.>`P]]tu#o8qHZNaL!e"D,-B;?dR@bMXbd+KS)uHUNYL5bO@PB-JGQ\elKO0t.N^;:fHJ
%?9XBlBHGM*.,OhVZ=b7p:J^J*pJH(V;]S8O_(J<F>77a]#>*rQ")cKN]#0-7gt24?_<n4(ks9J"YT<W#SQ"D?5#L8b:J\%4-!WK0
%Q_YtKd<k;o@*82Ul:dI-4g2,N7;fr<Zngi&1aoCL@0L770A$cnVQ_(q.*a7O0fpS>,4^$h3W@g[-2-N7_o#eEYP#+G9MLe4,YUO6
%Uo]F>@Z>1')O!;p'uX8e#+nG+NXc8kl_J(ddrQj4WWFV`L#OMq6aE/+1Bd\E1#L"9D\9]`43?-=>k4Rb*WdR>R;c:*>f-dfUdT4m
%k3l+o*W,"MbY1RZ.mK7'FJfO_pq&;/3,%k\'kN3L\fD)Z/l+8E5#/.tVRifi4?(FCM)q/]f[cVlSabh"cpnOR.!(7ji_]IkV@;a[
%;g"`9&I-dP6:rYkrq`?T(:&"TTu8'<*"/K9BWQh3:r!OK5T,F1T4[joP_s:?%f[qcN`54?@BP`4*k-OC%k3#-LZp([&.)7@Q$!_6
%WZ/f*9o1-pbTf3g<]-h7.('@`-)$k#oZ'WOTd3o^:*lT!=.btkWMBd;Hmb1iUln26/\^hDL=S[;cW56.C%qk.7&-a*-PnbZ`T&r/
%83!8',oD&[NP_'<Pfp?bDPXr#6DXU<",MuUp;*dW6to:'+4X,*:2qu4g1^tiQ79&6SUaHs6abBo;f0rWE1<n5b`H^/BQ?C2D:;3u
%P$=!KRm?GplC6C"P#A[=PB<"YAOsBZeP/#?3[CaNlR"W2Oq`qVRt;>JDj>Fn"$V-Gjb1Gk0l.lE[$.!nS4>L)KXo3fY"5r6U8b2(
%aP`$^,bK*:WnIbh4loQ(ekY-0gj$#nE4FcRSD'g1,SjUEDH/clK-<_'CSr:X8o$9N"H!]r*`VP!@'JNi4ioaQ-7c&CKP/WD!32Y&
%daHF9Oa_V1SZmU@KPp`68)[UFlF)/1<=i`LPCCB^B#d[8oM\;*"ONpq:CelR%K-G#PJ!AsrNlco83]]:mBe)I6pJ@C:1P'aOn9<[
%*i<_\oFn`Sa9*^=:PcaRe&O08'ZBGUKh(Fm!TC&M??*ou[.`nE?-@pED^fM7Se"<qRTj@:KNrQ&-IuKojX-tf=NfYh:c_A&L5;fl
%H=<?NW#Q&S=AKHaq+b,=80oi8RGH0*.L731nMj'8+o8\1K0?<6q)G%F^q/u[hA%>^R%ds*b;q0>Zo]]I[G3^[TLou)\WD?PZ7<p=
%j\?AN9i8GW)-a7;[A%\\]E2faXKTcCP3NW4e+qcA$q/aie65-^oCRdL?-nc_EM;C%-G0OUmW6m/3s'UmO:ak<-CS,m6b@DOL&3*M
%h$O0,QD)O4G`.Sn3&Lu>@p)*Xhg'R]HRHn5,]Jg!>2*PaDM_pm,-ai4nJ1eD`PK0U(.4#p_`#K`e/m54/bcLB^OG:H@Z]nl\\o_a
%j/l9@O43\?=dOkFB0p#Z7HER<&MU!_AT70l>?ae]DN3gQU@DK[K)&t-R;8X.[<4ft&OYJ'RTeH5]5qR9;lLf^\'[sV;8p1SQYF8,
%g;?X_]Yb.qR1_p)A=s:#[AK[4h9n&)&o!cn:p\?)\UKQLK(J<aLET-E@@L_@C6.]+QGp%9.i(-DE;Za'Vf\^B].+F14!rs7X03'X
%PnAX>PRLNJZdr),[9)?'&P1]/d2S;HH5QEiO1^>f10Ot=1fJ1:A9Ya=L)mU^k!^WeH8`e*3>PG#4]Jn0EIF(Bl<q]OJA<`heCkZf
%lBYOA,SJ91.E1:G#E%%8-^+t$*]$XcS[G=un]%!91/nS*n\R%D5:c!.YRDs2UR7.oDT;;Gi\k7tN(O0GBW/=%B'P[a7O/ViLAfSe
%1=FKEPgFI)Q67Bk5UG,fe"PSWo2p@Pq=5mALuKhSPKSkD>.uGHNgERKH(YL2kC&%-;B?%Bo!$\epU>$3Gn>h.4E)k1B5%)26Y:`o
%"Hh1NW7#7ZW=7WCZPG#!o'CP0FYJ'n:7p^3hdo<sBkNb0R^BC<6p$K]\l7^k:>g#(Tb<3h;"7S^\93+XBp&!@l[p=TKtpEh27<a5
%kK@<O'\j,XAVMAK\!1n)G-no_EXY$k@Gl*q'1D_YJ\"W[CV$!<[qnPRM/5[,H]6G(;+rgu#=5/'%9*^$)cJQP`g9c._?6]Ml[<u?
%>B"RH&P$kt$i5$Y,s"p6T$'YL'\4`X8NrgnVCe^S&l_G6--[!(?3[E`B!&$X>IQ0*7NtKGOAZQ`P#3a(HbF#&8[<msajunQnr5G0
%P*%<*k0(V(n[pm&bJHZLZda4m`;NH6VitYC89t\D.C7T)(9Lf,A0[3_\V_3h5&[q:ElJbY7#Z[h['cbu]5_Gf$pIZd='8#<i-o/R
%OpdnRA]R^j4Ne!c.LB&XC9=J([;Lh46mAn;i"1r6/iXO<>nBE<VLe#rm^CV`]l@Vg.nS2kUB]%qg<HS4&S^o-%I0C*kF41olnWO@
%Kj*4UVJ_5r6mAlDV%ZXCeBBE8c42+ULbV__[aoP62pU2;^X%ANrRjD_roX=[diZcJs5B=EG^fP)mlpaGirFQ'f=*uZqmVW)s7?3$
%O2(_NcbI3mT6G51rpgHB(>o)BpsY_)5JI$f^]3lph4%dOr0P/!_+4@<%mU!N:]L"_hu+W,A'm"~>
%AI9_PrivateDataEnd
